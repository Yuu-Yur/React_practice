3. 컴포넌트
useState()
hooks 중 useState는 배열을 반환함
이 배열은 두개의 값을 가지는 배열을 반환함
[data, setter]
이것을 할당할 때
인덱스 0 에는 변수명으로
인덱스 1 에는 이 변수의 setter 를 할당해줌
그리고 () 안에는 이 데이터의 초기값을 씀
즉
const [message, setMessage] = useState('');
로 쓰면 message 라는 변수의 초기값은 ''이고
setMessage 로 message 를 set할 수 있음

4. 이벤트 핸들러
const method = () => function
parameter 가 없으면 바로 method 를 써도 되지만
parameter 가 있는 경우 method 를 함수형태로 써야한다.
() => method()

state setter 이벤트 핸들러를 재사용 하기 위해
태그의 name 을 state 와 같게 지정하면 저장된다.
this.setState({
      username: '',
      message: ''
    });
이 상태에서 
name 이 username 인 태그와 message 인 태그에
동일한
handleChange = e => {
this.setState({
[e. target.name]: e.target.value
});
}
를 걸어주면 각각의 state 에 입력한 값이 들어간다.


크게 4가지 경우에 rerendering 하는데
그 중 하나인 state 의 변화는 조심해서 다뤄야 한다.
state 의 변화를 남발하면 state 변화 , rerendering , state 변화, rerendering...
연쇄작용으로 infinite loop 의 위험이 발생한다.


onKeyPress (e.target == enter) => onClick 이런식의 연쇄로
enter 키가 특정 버튼을 클릭 한 것과 같은 효과를 낼 수도 있다.

5. ref
react 에선 id 는 잘 사용하지 않고 ref 를 사용한다.
다만 id 를 사용해야 할 땐 id 뒤에 추가 텍스트를 붙여 중복을 방지함
ref 는 크게 두가지 방법으로 사용함.

1.지정하고 싶은 요소에 ref 라는 콜백함수를 props 로 전달
<input ref={(ref) => {this.input = ref}} />
이렇게 찍으면 this.input 은 위의 input 을 가르킨다.
즉 id를 지정하는 것과 비슷하게 ref 를 지정하는데 화살표 함수의 parameter 를 ref 로 사용하는것이다.

2. createRef 를 통해 설정
input = React.createRef();
<input ref={this.input} />
다만 사용할 때 this.input 이 아니라 this.input.current 를 사용해야 한다.


부모-자식간에 이벤트 리스너-핸들러 바인딩
부모가 자식컴포넌트를 쓸 때 이벤트 리스너를 props 로 쓰고 부모의 이벤트핸들러를 쓰고
자식이 이벤트 리스너를 쓸 때 이벤트 핸들러로 props.부모의 이벤트 리스너를 쓰면
자식의 이벤트가 일어났을 때 부모의 이벤트 핸들러를 작동할 수 있다.
추가로 부모의 이벤트 핸들러에서 자식의 이벤트 핸들러를 부르면
자식의 이벤트 -> 자식의 이벤트 리스너 -> 부모의 이벤트 리스너 -> 부모의 이벤트 핸들러 -> 자식의 이벤트 핸들러
이 과정에서 부모가 자식의 요소를 쓸 수 있다

// 주의점 스크롤 의 ScrollTop 은 화면 픽셀에 영향을 받는다.


6.컴포넌트 반복
map(함수) 기본 함수형태나 익명함수 형태나 많이 써왔던 그것
기존 객체는 그대로 두고 기존 객체를 가지고 새로운 객체를 만드는 것
concat(요소(객체)) 이것도 기존 객체를 변경하는 것이 아니라 요소를 추가한 새 객체를 만듬
filter 이것도 사용하던 것 조건에 맞는 객체만 남김, 조건을 !== 로 걸면 특정을 제외한 것만 남김 즉 특정한 것을 삭제

const nextForm = { ...form, [e.target.name]: e.target.value, };
name.id === selected.id ? { ...name, text: updateInput } : name,
이런식으로 { 스프레드 연산자, 키:값의 형태 }를 쓴다면 객체의 특정 값을 덮어씌울 수 있음
스프레드 연산자는 완전히 같은걸 복사하여 반환, 다만 중첩된 객체나 배열은 참조로 복사
배열의 경우엔 뒤의 것을 추가함, 객체의 경우엔 뒤의 것으로 덮어씀


7. 컴포넌트 라이프사이클
라이프사이클메서드는 클래스형컴포넌트에서만 사용 가능
마운트, 업데이트, 언마운트
업데이트에도 4가지 경우 업데이트가 있음
-state, props 변경, 부모 컴포넌트의 리렌더링, 그리고 forceUpdate

7.1마운트
constructor(props) : 컴포넌트 생성자
getDerivedStateFromProps(nextProps,prevState) nextState 를 반환 : props 로 받은 값을 state 에 동기화
render() 화면 반환 : 화면 렌더링
componentDidMount() : js라이브러리나 프레임워크의 함수 호출, 이벤트 등록 등등 후처리

7.2업데이트
getDerivedStateFromProps(nextProps,prevState) nextState 반환
shouldComponentUpdate(nextProps,nextState) true,false 반환 : props 나 state 변경 시 리렌더링 여부 지정
render() 화면 반환
getSnapshotBeforeUpdate(prevProps,prevState) snapshot 반환 : render 결과가 브라우저에 반영되기 직전에 호출, 업데이트 직전 값을 참고할 일이 있을 때
componentDidUpdate(prevProps,prevState,snapshot) 반환값 없음 : render 완료 후 실행, prevProps, prevState, snapshot 을 받아 사용할 수 있음

7.3언마운트
componentWillUnmount() : componentDidMount 에서 등록한 것들을 제거해야함

7.4예외
componentDidCatch(error,info) : 에러 발생 시 사용
각각 무엇을 parameter 로 받는지 주의


8. Hooks
useState(초기값) : [변수, 세터] 를 반환함
useEffect(콜백함수, 의존성 배열) :  마운트 시 호출, 의존성 배열의 내용이 변경될 때마다 호출, 의존성 배열이 빈 배열이면 내용이 변경되지 않으므로 마운트 시 한번만 호출
                                  콜백함수 안에 쓰는 return 은 클린업함수, 클린업 함수는 콜백함수 보다 먼저 호출, 그리고 언마운트 시 클린업 함수만 호출됨
useReducer(리듀서 함수, 상태 초기값) :  action 값은 {type:'INCREMENT', ~:~, ~:~} 의 형태 , 현재state, 업데이트 정보 action 을 parameter 로 받아 새로운 state 를 반환
                                      결국 useState 와 같은데 setter(dispatch) 를 reducer(state,action) 으로 따로 정의 할 수 있음 state 는 useReducer 의 초기값으로 정의할 수 있고
                                      action 은 setter(dispatch) 의 parameter 로 넣어줄 수 있음
                                      즉 reducer 함수를 만들 때는 useReducer 에서 state 의 초기값을 정의하고, dispatch 의 parameter 로 넣어줄 값을 미리 정하고
                                      reducer 함수 안에서 사용하는것이 좋음
                                      아니면 아예 reducer 함수 안에서 써놓고 state 와 dispatch 의 parameter 에서 reducer 함수 안에서 정한 state.~ , action.~ 에서
                                      ~ 에 맞는 값을 넣어주어야함
                                      action 의 객체 중 키를 state 의 객체 키랑 같게 맞추면 {...state, [action.key] : action.value} 로 덮어쓸 수 있음
                                      한술 더 떠 e.target 을 써서 e.target.key 에 state 의 key 를 넣으면 e.target.key={key} 자동으로 state 와 action 이 연계됨
useMemo(반환값을 가지는 함수, 의존성 배열) : 의존성 배열의 값이 변경될 때만 함수 (실행하여) 결과 반환, 아니라면 전의 결과를 다시 사용
useCallback(콜백함수, 의존성 배열) :  의존성 배열의 값이 변경될 때만 콜백 함수 (생성하여) 반환, 단 주의점 : 콜백함수 안에 state 를 사용해야 할 때는 그 state 는 무조건 의존성 배열에 들어가야 함
                                    state 를 사용한다고 useCallback 을 쓸 필요가 없지는 않음. 전체 state 변화에 함수를 생성하는것과 특정 state 변화에 함수를 생성하는 것은 다름
                                    ref 를 쓴다면 ref.current 를 쓰고 의존성 배열에서 지울 수 있긴 함
const 변수명 = useRef(null) : 변수명을 ref 로 사용할 수 있게 함 이후 참조하고 싶은 곳에 ref={변수명} null 을 쓰는 이유는 빈 참조객체를 반환하게 하기 위함
로컬 변수, 렌더링과 상관 없는 값을 정 써야한다면 사용, ref사용
const 변수명 = useRef(값); 이후 setter 로 변수명.current = 바꿀 값; 으로 쓸 수 있음 , react 의 기본 정신에 위배되므로 가급적 쓰지 말것
커스텀Hooks
use~~~.jsx 의 커스텀 hooks 를 만들고 이것을 export default function use~~~(return ~~){}  의 형태로 쓰면
이것을 import 해와서 반환을 쓸 수 있음, 즉 그냥 각종 기능을 여러번 작성해야 하는 경우 이것을 커스텀 hooks 로 만들어 빼두고 import 해오는것 뿐이다.


9. 컴포넌트 스타일링
일반 CSS, Sass, CSSModule, styled-component
네가지가 있음

일반 CSS
CSS클래스의 이름(name, className)은 중요함 안겹치게
컴포넌트-클래스의 방식이 있음, BEM naming 법 bootstrap 에서 볼 수 있음

Sass (Syntactically Awesome Style Sheets)
CSS 의 전처리기, 쉽게 표현하면 CSS 확장판
두가지 확장자가 있음
sass, scss
큰 차이점은 중괄호와 세미콜론을 사용하지않고 사용함
css와 비교적 비슷한 scss 확장자가 익숙함
css 에 추가로 변수선언, 사용이나 아래와같은 추가 기능들을 사용해 간결하게 작업 가능
변수, parameter 등에는 $ 를 붙여 사용
@mixin -> @include 로 중복되는 코드를 따로 빼 사용할 수 있음
css 사용 파일과 선언 파일을 구분하여 작성하고 @import ''; 나 @use '' as *; 로 불러옴

아래로 경로변수를 선언하고
const __dirname = path.dirname(fileURLToPath(import.meta.url));
path 와 url import
아래로 경로 변수에 위치를 담아 @styles 로 선언
resolve: {
    alias: {
      // src/styles를 간단히 import하기 위한 alias
      '@styles': path.resolve(__dirname, './src/styles'),
    },
  },
node_modules 에서 불러오려면 ~ 면 됨
vite 에서는 기본적으로 ~없이도 찾음
스프링에서 mvnRepository 같이
react 에서는 mpn 에서 찾고 상세를 확인할 수 있음

include-media 반응형 쉽게 만들어줌(미리 설정해둔 변수를 사용 가능)
open-color 색상 팔레트 사용(미리 설정해둔 변수 사용)

CSSModule
cssModule 은 클래스에 자동으로 _해시 를 붙여서 자동으로 중복방지
CSSModule.module.css 에서 설정하고 사용할 곳에서 styles 로 import
설정할 땐 일반적인 CSS 작성하듯 작성, 전역 설정은 :global
사용할 땐 className 으로 사용하는데 대신 styles.클래스명 으로 써야함
대신 전역은 ''을 사용하여 문자열로 사용
여러개의 스타일을 쓰고 싶을 땐 EL 표기법
Template Literal 즉 백틱을 사용해 여러 EL표기를 붙여줌 , 지금까지 사용해옴

classnames 라이브러리
className 에 조건문을 사용하려면 조건식이 필요함 이것을 줄여줌
component 의 parameter 에 props 로 받는 값을 쓰고
className 에 classnames('component', {props로 받는 값1} , props로 받는 값2)
이렇게 props로 받는 값1 의 true/false 에 따라 이것을 className 에 추가하는지 아닌지 정해짐

또 module과 함께 사용하여
const cx = classNames.bind(styles); 
로 할당하고 cx('class1','class2')로 쓸 수 있음

module 과 sass를 조합하여
CSSModule.module.css 를 .sass, .scss 로 바꿀 수 있음

CSSModule 의 Local 과 global
기본 설정이 Local 이므로 따로 신경쓰지 않아도 됨 -> import 한 곳에서 사용 가능
global 전역 설정 -> import 없이 그냥 지정하여 사용 가능

styled-components
import styled, { css } from 'styled-components';
jsx 파일 안에서
const 로 css클래스를 쓰고 `` 백틱으로 style 을 작성 가능
추가로 EL표기법${} 로 props 를 받아 조건문에 사용가능 props.ooo && 스타일``
    <Button inverted={true}>테두리만</Button>
이런식으로 jsx 쓸 때 바로 props 전달 가능

tagged 템플릿 리터럴
function tagged(...args) {
  console.log(args);
}
여기의 parameter 에 넣은 객체나, 함수를 온전히 추출할 수 있음

미디어 쿼리 함수
const sizes = {
  desktop: 1024,
  tablet: 768,
};

const media = Object.keys(sizes).reduce((acc, label) => {
  acc[label] = (...args) => css`
    @media (max-width: ${sizes[label] / 16}em) {
      ${css(...args)};
    }
  `;
  return acc;
}, {});

Object.keys(sizes) : sizes 의 key 로만 배열 반환
위에서 만든 배열로 .reduce()
누적값은 acc 초기값은 {}, label 이 현재값
acc[label] 은 acc에 키를 추가
즉 {desktop: } =
{tablet: } =
이 키들에 value 를 할당하겠다는 소리
(...args) => css`
    @media (max-width: ${sizes[label] / 16}em) {
      ${css(...args)};
    }
  `
는 css`~~~~~` 를 할당하겠다는 얘기
결과값은 잘 모르지만 {desktop: (...args) =>  css`@media (max-width: ${sizes[label] / 16}em) {${css(...args)};}`}, {tablet: (...args) =>  css`@media (max-width: ${sizes[label] / 16}em) {${css(...args)};}`} 의 형태가 될 것

{desktop: (...args) =>  css`@media (max-width: ${sizes[label] / 16}em) {${css(...args)};}`}
...args 는 그대로 css의 (...args) 에 사용되는 거니 넘어가고
${sizes[label] / 16}em
은 sizes 에서 label 의 값을 가져와 16으로 나눈 em 을 뜻함
즉 desktop 에선 1024/16em, tablet 에선 768/16em
한마디로 위의 미디어 쿼리 함수는 크기를 변수에 할당하고 그 변수마다 각각 max-width 를 지정한 media 쿼리를 객체로 생성하며 그것에 css 속성을 넣어 사용한다.

결과적으로
const media = {
  desktop: (...args) => css`
    @media (max-width: 1024/16em) {
      ${css(...args)};
    }`
  tablet:(...args) => css`
    @media (max-width: 768/16em) {
      ${css(...args)};
    }`
}

해서 사용할 땐
${media.desktop`width:100%`}
media 는 const 니까 EL표기법, desktop 객체를 부름, args 로 width:100%
css`
  @media (max-width: 1024/16em) {
    width:100%
  }`

추가로
${media.tablet`background: white`}
면
css`
  @media (max-width: 768/16em) {
    background: white
  }`


10. Todo 애플리케이션 만들어보기
실습과 같음, 객체에 대해 map, reduce, concat, filter 등을 잘 쓰고
useState, useRef 등, props 를 전달하고 받아서 사용

배열, 리스트 등등 순회할 수 있는 객체.reduce(
  (acc, now) => {
    순회하면서 실행할 함수
    return acc
  }
  )

  객체를 작성할 때 속성명과 변수명이 같으면 단축할 수 있다
  ex) ex:ex, 면 단축해서 ex,

11. 10장에서 만든 프로그램의 최적화, todo 수를 몇천개로 늘리면 오래걸림
최적화 1. React.memo : export default에서 내보내는 곳을 React.memo(이름) 으로 하면 props에 변화가 생겨야 리렌더링
최적화 2. setter 에 직접 상태 쓰지 않기, () => {} 로 함수형으로 처리해서 state 가 변할때 마다 새로 setter 를 만드는게 아닌 state 의 변화와 상관없는 함수형으로 만듬
      2-2. useReducer 을 사용하기 setter 을 dispatch 로 만들고 각각 crud 마다 action.type 을 정하고 reducer 에서 switch case
최적화 3. react-virtualized : 보여주는 컴포넌트를 가상화해서 특정 픽셀에 들어갈 만큼의 row 만 rendering 함
rowRenderer 을 콜백으로 사용
index, key, style 을 parameter 로 받아서
todos[index]; 을 할당하고 todo로
return (
        <TodoListItem
          todo={todo}
          key={key}
          onRemove={onRemove}
          onToggle={onToggle}
          style={style}
        />
        );

그리고 밑에서 return (
  <List 
        className="TodoList"
      width={512} // 전체 너비
      height={513} // 전체 높이
      rowCount={todos.length} // 항목 개수
      rowHeight={57} // 각 항목의 높이
      rowRenderer={rowRenderer} // 항목을 렌더링하는 함수
      list={todos} // 렌더링할 데이터 배열
      style={{ outline: 'none' }} // 기본 outline 스타일 제거
      />
)

마지막으로 rowRenderer style props 로 주는것을 TodoListItem 에서 받아야 한다.
최상위 div 에 className={기존이름-virtualized} style={style} 설정


12. 불변성 유지
앞에서 {...객체,요소: ~} 은 객체를 복사하고 지정 요소를 덮어쓰기
[...객체, 요소:~] 은 객체를 복사하고 지정 요소를 추가하기로 배웠다.
...는 스프레드 전개 연산자로 객체를 복사하는 연산자인데 문제점은 제일 윗단만 얕은 복사를 하는 점이다.
깊은 객체를 스프레드 연산자로 제일 윗단만 복사하여 사용하면 문제점이 생기고
깊게 있는 요소를 수정하려면
let nextObject = {
  ...object,
  somewhere: {
    ...object.somewhere,
    deep: {
      ...object.somewhere.deep,
      inside: 4,
    },
  },
위처럼 코드가 쓸데없이 길어진다. 이것때문에 immer 를 사용한다.

import { produce } from 'immer'; 로 import
const nextState = produce(originalState, (draft) => {
  draft.somewhere.deep.inside = 5;
});
단 요소 key 에 접근할 때 동적으로 접근하고싶다면 .key 를 [parameter] 로 써야한다.
produce() 는 두가지 parameter 받음, 변경할 state , setter
즉 produce(state,setter) 은 형태
대신 setter 가 자동으로 parameter 로 state 를 복사한 것을 받으므로
parameter 를 가지는 함수로 써야한다.
이러면 스프레드 연산자를 쓴 긴 코드가 아니라 직관적으로 접근하는 코드를 쓸 수 있다.
또한 이 setter 의 함수 안에선 parameter 는 배열이므로 내장 함수도 쓸 수 있다. (splice, findIndex, map, filter 등등)
useCallback 와 immer 조합
produce(setter) 만 쓰면 setter 를 반환함 대신 안에서 요소key 를 썼으므로 그런 key 가 있는 state 에만 쓸 수 있음
결론
produce(state, setter) 은 변환된 state(복제) 를 반환하고
produce(setter) 은 setter 함수 자체를 반환함

splice 복습
splice 는 배열 자체를 직접 변경하므로 react 에선 복사본에만 써야함
배열.splice(변경시작할인덱스,제거갯수,옵션(삽입할 요소1,요소2,...,요소n))


13.리액트 라우팅
리액트는 기본적으로 html 하나만 사용
spa : single page application
a tag 로 화면을 넘기면 state 가 전부 깨져버리기에 사용하지 않음
브라우저의 History API를 사용하여 브라우저의 주소창의 값만 변경하고 다른 컴포넌트를 보여줌
index 에서 import 설정 후
BrowserRouter : 최상위에서 쓸 곳을 감쌈
Routes, Route : 라우팅 컴포넌트에서 사용
Route : <Route path="주소규칙" element={보여 줄 컴포넌트<>} />
주소규칙은 / 뒤에 라우팅 주소씀
Link : 리액트 프로젝트 에서의 a 태그를 담당, a 태그와 작동방식이 전혀 다르다는것
<Link to="주소규칙">~~~</Link> 으로 컴포넌트 불러옴

URL 파라미터
useParams hook import 필요 라우터 라이브러리에서
useParams : 루트에서 지정한 path 의 :key 를 객체로 반환함 { 키: 값(해당 위치에 입력받은 값) }
path
/profiles/:username
실제 입력받은 값
/profiles/gildong
여기서 useParams 는 {username: gildong} 을 반환함
만약 여러 key 를 쓰고싶으면 이어 쓰면 됨
ex) /profiles/:username/:a/:b/:c

쿼리스트링
useLocation hook import 필요 라우터 라이브러리에서
useLocation() 는 객체를 반환하는데
{search:,pathname,hash,state,key} 의 형태다
pathname 은 현재 경로(주소규칙), search 은 ? 를 포함한 쿼리스트링 전체, hash 구형 브라우저에서 History API 가 지원되지 않을 때,
state 는 이동 시 넣을 수 있는 state값, key 는 이 객체의 고유값 페이지가 변경될때마다 고유값 생성
여기서 search 에서 쿼리스트링을 구분해내려면 ? 을 빼고, &와 로 스플릿하고 또 = 로 나눠서 key,value 를 구해야하는데 너무 귀찮음
react v6부터 쿼리스트링을 파싱할 수 있는 hook 생김
useSearchParams : searchParams, setter 반환
즉 [searchParams,setSearchparams] = useSearchParams();
이 searchParams 에서 get(key) 로 value 를 반환받을 수 있음
ex) const detail = searchParams.get('detail');
단 무조건 문자열로 반환되는것은 주의 형변환이 필요함

중첩 라우팅
레이아웃 표현할 때 유효
중첩 라우팅 설정
1. Route 를 부모-자식 컴포넌트 관계로 만듬
2. Outlet 사용 import from 'react-router-dom'
부모 컴포넌트에서 자식 컴포넌트를 보여줄 자리에 <Outlet />
부모-자식 컴포넌트를 만들 때 부모의 path 를 설정하지 않으면
자식의 주소를 쓰는데 부모의 컴포넌트에서 자식 컴포넌트를 Outlet 으로 불러올 수 있음

Route 컴포넌트에는 기본적으로 index 가 props 로 내장되어있다.
이것은 path="/" 와 같음

useNavigate : 함수로 다른 페이지 이동
const navigate = useNavigate();
navigate(-1); 이전페이지
navigate('주소') : 주소로 이동
두번째 parameter 를 {replace:true} 로 사용하면 히스토리에 기록을 추가하지 않음 -> 뒤로가기 해도 정보가 없음
여기서 navigate 는 당연히 함수이므로 이벤트 리스너에 붙일 수 있다.
결국 Link 는 a태그 처럼 링크고 navigate 는 함수이다.

NavLink : 링크가 현재 라우트의 경로와 일치하는 경우 스타일을 적용시킬 수 있음

마지막에 Route path="*" element={<NotFound />}
즉 지정되지 않은 주소로 접근하면 NotFound 띄워준다는것

Navigate 컴포넌트
리다이렉트 해주는 컴포넌트
useNavigate 와 비슷함
다른점은 Navigate 는 컴포넌트고 useNavigate 는 함수를 반환해주는 것이다.
to= 로 간다.


14. api 사용
axios 라이브러리 사용
비동기 await axios.get(api 주소) 로 응답을 받음, await 을 써야하니 그 함수에도 async 설정
단 useEffect 를 쓸텐데 useEffect는 promise 를 반환하고 await 은 promice 를 반환하니 useEffect 에 직접 async 를 걸면 안되고
안의 콜백함수에 async 를 써야한다. ex) async () => {}
response 에 할당하고 response.data 로 데이터 객체를 꺼냄
이것을 정보를 그릴 컴포넌트에 props 로 전달

1. useState 사용
useState 로 api 의 requestParams 를 관리하고 queryString 으로 정보를 받음
const query = category === 'all' ? '' : `&category=${category}`;
이런 식으로 쿼리 스트링을 동적으로 선택할 수 있음(category 를 정하고 받으면 됨)
state 를 설정하고 변경하므로 업데이트가 지속적으로 발생함
부모 컴포넌트까지 업데이트가 미치지 않게 부모 컴포넌트는 관련 컴포넌트끼리 묶어서 최적화 해야한다.
ex) 부모 컴포넌트에 지금 Category 와 NewsList 가 있는데 이대로 쓰면 이 부모 컴포넌트가 계속 업데이트되어 다른 컴포넌트들도 다시 불러옴
그렇기에 이 두개를 묶으면 이 두개가 업데이트되어도 부모 컴포넌트엔 영향이 없어 다른 컴포넌트들을 다시 불러오지않음

2. 라우터 사용
애시당초 state 를 좀 덜쓰면? -> 라우팅을 사용해서 url parameter 를 받아 props 로 사용
즉 가능한 state 를 줄이면 업데이트를 줄일 수 있고 최적화에 도움이 된다.

3. customHooks 사용
함수와 의존성배열을 받아 성공,로딩,실패 를 반환하는 함수를 만들어놓고 이것을 import 해와서 사용
성공 = parameter 로 받는 함수라고 쓰면 됨

http://apis.data.go.kr/1360000/RoadWthrInfoService/getCctvStnRoadWthr?ServiceKey=zytXafKy%2Bm%2FrnUWmID8dWjMYtcsoEGBLO42CK%2BGCj7GqtS2rAskQyRttpfZ2dvx8SxomL8i90ZMPjBEJM2Plig%3D%3D&pageNo=1&nomOfRows=4&eqmtId=0500C00001&dataType=JSON
이것을 axios 로 get 하면
{
  "response": {
    "header": {
      "resultCode": "00",
      "resultMsg": "NORMAL_SERVICE"
    },
    "body": {
      "dataType": "JSON",
      "items": {
        "item": [
          {
            "baseDate": "20250123",
            "baseTime": "1510",
            "weatherNm": "현상없음"
          }
        ]
      },
      "pageNo": 1,
      "numOfRows": 10,
      "totalCount": 1
    }
  }
}
이런 response 가 돌아온다.
.data.response.body.items.item 이 우리가 원하는 데이터


15장. context api
context 라 함은 전역 설정과 같음
createContext({color:'black'}) 를 사용하여 context 작성
전역 설정을 사용할 땐
<ColorContext.Consumer> 태그로 덮어야 함
그리고 안에서 parameter 를 가지는 함수 작성
parameter 은 createContext({color:'black}) 의 객체

전역 설정을 만들어 놓은건 좋은데 이것을 변경 할 수 없다면 계속 전역 설정을 추가해야하는 불편함
<ColorContext.Provider value={{ color: 'red' }}>
setter 라고 보면 됨

createContext() 에 객체를 좀 깊은 객체를 만들어놓고
getter Consumer , setter Provider 을 선언하고 export 하면
ColorConsumer, ColorProvider 사용 가능
이 아래서 value 를 parameter 을 사용해도 되지만 깊은 객체의 경우 구조파괴할당으로 사용할 수 있음
useContext 를 사용해서 밖으로 빼낼 수도 있음






배운 외부 라이브러리
sass : css 코드 깔끔하게 쓸 수 있게, css 코드에서도 변수와 mixin include을 사용한 함수형태를 사용할 수 있게
open-color
include-media
classnames
styled-components
react-icons
react-virtualized
immer
react-router-dom
axios

언급한 프레임워크
Next.js 리액트 프로젝트의 프레임워크



