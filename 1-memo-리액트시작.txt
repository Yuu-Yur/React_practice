자바스크립트 

웹 브라우저 환경에서만 작업했음. 
확장되면서, node 도구를 이용해서, 웹 브라우저 탈출, 
즉, 로컬 환경에서도, 자바스크립트 언어를 이용해서, 애플리케이션을 
개발이 가능. 

- 웹 , 모바일, 응용소프트웨어, 

자바스크립트 언어만 이용해서, 작업하는 개발자도 많음. 

기본 구조, MVC 
모델 , 뷰 , 컨트롤러 

리액트는 오직 뷰만 다룸. 

기존에 html 에서, 무언가 업데이트 예시 
<div id= "post-1">
  <div class="title">hello</div>
    ...
변경할 요소의 부모 부터 시작해서, 자식 해당 요소까지 계속 찾아가는 
과정 -> 업데이트 하는 과정. 

가정, 만약, 규모가 커지면, 찾아가는 과정이 길어짐. 
- 자원 소모가 심해짐. 속도 느려짐. UX 향상. 

리액트 팀,(메타팀)
고민? 
-> 기존 뷰를 다 날리고, 새로 그립니다. 
-> 불변성 유지. 

SPA(Single Page Application)
MPA vs SPA
차이점. 
MPA : 여러개의  html를 사용했음. 
ex) login.html, join.html, list.html, ... 

SPA : 하나의 html 만 사용. 
해당 요소에, 비교, 타임리프 , base.html -> content 
index.html, <div id=root> ,여기에 해당 요소(컴포넌트)그리기. 

예시) 기본적인 SPA 구조. 
index.html -> src/main.jsx -> App(컴포넌트) -> 그려주기. 

결론, 
무조건 리액트로 SPA 로 만 개발하는게 정답인가요? 
아니요. 상황에 따라, 규모에 따라, 예산에 따라, 달라짐. 


초기 렌더링. 

리액트 -> 뷰 만 다룸. 

render(), : 리액트에서 화면을 그려주는 역할. 

html 형식의 문자열을 반환 하지 않음. 
-> 뷰라는 특정 객체를 반환함. 

업데이트 과정 (조화 과정)

1. 컴포넌트 요소(로그인 화면, 입력창, 라벨 , 묶음) 비슷 UI 
새로운 요소로 교체한다.

이전의 돔 트리 구조, 새로운 돔 트리 구조를 비교를하고서, 
새로운 요소로 교체한다.


특징, 

가상 돔, 
DOM(Document Object Model) , 
: 실제 돔에 접근하여 조작하는 대신, 
추상화한 자바스크립트 객체를 구성. 

1. 데이터 업데이트 전체 UI 를 가상 돔에 리렌더링(다시 그리기)
2. 이전 가상 돔에 있던 내용과 현재 내용을 비교, 
3. 바뀐 부분만 실제 DOM 에 적용. 

마치, 자바 -> JPA -> 영속성 컨텍스트 -> 1차 캐시 테이블 -> 실제 테이블 
HTML -> 가상 돔1 -> 가상 돔 2 -> 비교 ->  실제 돔에 다시 그리기. 

- 프레임워크가 아님. 
- 라이브러리, 다른 vue.js 프레임워크에 리액트를 추가 , 
 angular 프레임워크에, 리액트 라이브러리 도입. 
- MSA, 작은 조각으로 작업을 해서, 다른 곳에 추가, 교체 가능. 
 
- 단점. 
- 리액트 하나만으로는 작업이 불가능. 
- 리액트 (화면만 그림.), 만약, 다른 이동 라우팅, react-router 기능 
필요함. 즉, 혼자 작업을 못하게 필요한 다른 기능들을 사용을 해야함. 
초반에 어떤 도구를 사용해야할지 어렵습니다. 선택 장애. 
하지만, 대체적으로 작업을 많이하는 도구가 통계적으로 사용하는 순위로 
사용할 예정. 

