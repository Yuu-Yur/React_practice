3장컴포넌트
3.1 클래스형 컴포넌트
3.2 첫 컴포넌트 생성
3.3 props
3.4 state
3.5 state를 사용할 때 주의 사항
3.6 정리
- 

리액트를 사용하여 애플리케이션의 인터페이스를 설계할 때 
사용자가 볼 수 있는 요소는 여러 가지 컴포넌트로 
구성되어 있습니다. 

예를 들어 뒤에서 만들어 볼 일정 관리 애플리케이션을 미리 살펴봅시다.


위 프로젝트는 총 네 가지 컴포넌트를 사용하여 구성했습니다. 
먼저 전체적인 틀을 잡아 주는 TodoTemplate 컴포넌트입니다. 

이 컴포넌트는 현재 화면의 중앙에 있는 사각형 레이아웃의 역할을 하고 있습니다. 
그리고 새로운 항목을 추가할 수 있는 Todolnput 컴포넌트입니다. 
위 화면에서는 검정색 영역이 바로 Todolnput입니다. 

그리고 할 일 항목을 여러 개 보여 주는 TodoList 컴포넌트입니다. 
마지막으로 TodoList에서 각 항목을 보여 주기 위해 사용되는 
Todoltem 컴포 넌트입니다.
컴포넌트의 기능은 단순한 템플릿 이상입니다. 

데이터가 주 어졌을 때 이에 맞추어 UI를 만들어 주는 것은 물론이고, 
라이프사이클 API를 이용하여 컴포넌트가 
화면에서 나타날 때 , 사라질 때, 변화가 일어날 때 
주어진 작업들을 처리할 수 있으며, 

임의 메서드를 만들어 특별한 기능을 붙여 줄 수 있습니다.


이 장에서는 먼저 클래스형 컴포넌트에 대해 살펴본 뒤, 
컴포넌트를 새로 만들고 사용하는 방법을 알아보겠습니다. 
그리고 컴포넌트의 속성 값을 지닌 props와 상태 값을 지닌 
state를 사용하는 방법도 알아보겠습니다.


3.1 클래스형 컴포넌트
2장에서 보았던 App 컴포넌트는 함수 컴포넌트며, 
코드가 다음과 같은 구조로 이루어져 있습니다.

App.js
import './App.css';
function App() {
const name = '리액트';
return <div className="react">{name}</div>;
｝
export default App;

컴포넌트를 선언하는 방식은 두 가지입니다. 
하나는 함수 컴포넌트이고, 또 다른 하나는 클래스형 컴포넌트입니다.

클래스형 컴포넌트가 어떻게 이루어졌는지 확인해 볼까요?

App.js 코드를 한번 다음과 같이 수정해 보세요.

App.js
import React, {Component } from 'react';
class App extends Component {
render () {
const name = 'react';
return <div className="react">{name}</div>;
}
}

export detauLt App;

클래스형 컴포넌트로 바뀌었지만 역할은 이전에 보았던 
함수 컴포넌트와 똑같습니다. 
클래스형 컴포넌트와 함수 컴포넌트의 차이점은 

클래스형 컴포넌트의 경우 이후 배울 
state 기능 및 라이프사이클 기능을 사용할 수 있다는 것과 
임의 메서드를 정의할 수 있다는 것입니다.

노트
ES6의 클래스 문법
ES6 이전에는 자바스크립트에 클래스(class)가 없었습니다. 
개념 자체는 있었지만, 
그것을 구현하려면 cLass 대신에 prototype이라는 
문법을 사용하여 다음과 같이 작업해야 했습니다

function Dog (name) {
this. name = name;
｝
Dog. prototype.say = function() {
console. log (this.name + ': 멍멍');
}
var dog = new Dog(' 검둥이');
dog.say(); // 검둥이: 멍멍

ES6 문법부터는 이것과 기능이 똑같은 코드를 
cLass를 사용하여 다음 과 같이 작성할 수 있습니다.

class Dog {
constructor (name) {
this.name = name;
}
say () {
console. log (this.name +': 멍멍');
｝

}
const dog = new Dog('흰둥이');
dog.say(); // 흰둥이: 멍멍

클래스형 컴포넌트에서는 render 함수가 꼭 있어야 하고, 
그 안에서 보여 주어야 할 JSX를 반환해야 합니다.

컴포넌트를 선언할 수 있는 두 가지 방법 중 어느 상황에 
함수 컴포넌트를 사용해야 할까요?

함수 컴포넌트의 장점을 나열해 보면 다음과 같습니다. 
우선 클래스형 컴포넌트보다 선언하기가 훨씬 편합니다. 
메모리 자원도 클래스형 컴포넌트보다 덜 사용합니다. 

또한, 프로젝트를 완성하여 빌드한 후 배포할 때도 
함수 컴포넌트를 사용하는 것이 결과물의 파일 크기가 더 작습니다

(함수 컴포넌트와 클래스형 컴포넌트는 성능과 파일 크기 면에서 
사실상 별 차이가 없으므로 이 부분은 너무 중요하게 여기지 않아도 됩니다).

함수 컴포넌트의 주요 단점은 state와 
라이프사이클 API의 사용이 불가능하다는 점인데요. 

이 단점은 리액트 v16.8 업 데이트 이후 Hooks라는 
기능이 도입되면서 해결되었습니다 . 

완전히 클래스형 컴포넌트와 똑같이 사용할 수 있는 것은 아니지만 
조금 다른 방식으로 비슷한 작업을 할 수 있게 되었습니다. 

이번 장에서 Hooks에 대한 내용은 맛보기로만 조금 배워 보고, 

8장에서 더 자세히 다루겠습니다.

리액트 공식 매뉴얼에서는 컴포넌트를 새로 작성할 때 
함수 컴포넌트와 Hooks를 사용하도록 권장하고 있습니다.
 
하지만 그렇다고 해서 클래스형 컴포넌트가 사라지는 것은 
아니므로 클래스형 컴포넌트의 기능은 꼭 알아 두어야 합니다.

초반부에서는 기능을 구현할 때 클래스형 컴포넌트 위주로 사용하여 
리액트의 기본기를 익히고, 

후반부에 서는 Hooks를 완벽히 이해한 후 
함수 컴포넌트와 Hooks를 기반으로 컴포넌트를 작성합니다.


3.2 첫 컴포넌트 생성

첫 번째 컴포넌트를 만들어 봅시다.


3.2.1 src 디렉터리에 MyComponent.js 파일 생성

컴포넌트를 만들려면 컴포넌트 코드를 선언해야 합니다. 
컴포넌트 코드를 선언할 파일을 만들어 봅시다. 
VSCode 왼쪽 사이드바에 있는 파일 목록 중 
src 디렉터리를 마우스 오른쪽 버튼으로 누른 후 
새 파일 메뉴를 선택하세요.

새 파일 이름을 입력하는 칸이 나타나면 MyComponent.js
라고 입력하세요.


3.2.2 코드 작성하기
MyComponent.js 파일을 열고 새 컴포넌트의 코드를 작성 해보세요. 
먼저 함수 컴포넌트로 작성하고, 
나중에 클래스형 컴포넌트로도 작성해 보겠습니다.

MyComponent.js
const MyComponent = () => {
return <div>나의 새롭고 멋진 컴포넌트</div>;
}
export default MyComponent;

이번에 작성한 코드는 이전에 보았던 App 컴포넌트와 
형태가 조금 다릅니다. 
함수를 작성할 때 function 키워드를 사용하는 
대신에 () => {}를 사용하여 함수를 만들어 주었습니다. 
이는 ES6에 도입된 화살표 함수 문법입니다.

노트
ES6의 화살표 함수
화살표 함수(arrow function)는 ES6 문법에서 
함수를 표현하는 새로운 방식입니다. 

그렇다고 해서 기존 function을 이용한 
함수 선언 방식을 아예 대체하지는 않습니다. 
사용 용도가 조금 다릅니다. 
이 문법은 주로 함수를 파라미터로 전달할 때 유용합니다.

setTimeout (function() {
console. log ('hello world');
}, 1000);
SetTimeout() => t
console.log ('hello world');
3, 1000);

이 문법이 기존 function을 대체할 수 없는 것은 
용도가 다르기 때문입니다. 

무엇보다 서로 가리키고 있는 this 값이 다릅니다.

다음 코드를 한번 확인해 보세요.
function BlackDog () {
this.name ='흰둥이';
return {
name: '검둥이',
bark: function() {
console. log (this.name + ': 9O!');
}
｝
｝

const blackDog = new BlackDog (;
blackDog.bark(); // 검둥이: 멍멍!


function WhiteDog() {
this.name ='흰둥이';
return {
name: '검둥이',
bark: () => {
console. log (this.name + ': ID!');
const whiteDog = new WhiteDog();
whiteDog.bark(); // 흰둥이: 멍멍!

function을 사용했을 때는 검둥이가 나타나고, 

()=>를 사용했을 때는 흰둥이가 나타납니다. 

일반 함수는 자신이 종속된 객체를 this로 가리키며, 

화살표 함수는 자신이 종속된 인스턴스를 가리킵니다.

화살표 함수는 값을 연산하여 바로 반환해야 할 때 사용하면 
가독성을 높 일 수 있습니다.

function twice(value) {
return value * 2;
}
const triple = (value) => value * 3;

이렇게 따로 {}를 열어 주지 않으면 
연산한 값을 그대로 반환한다는 의미입니다.

함수 컴포넌트를 선언할 때 function 키워드를 사용하는 것과 
화살표 함수 문법을 사용하는 것간에는 큰 차이가 없습니다. 

화살표 함수를 사용하는 것이 좀 더 간결하기 때문에 
함수 컴포넌트를 만들 때 화살표 함수 문법을 사용 하겠습니다. 
어떤 방식을 선택할지는 단지 각자의 취향에 달려 있습니다.

노트
Reactjs Code Snippet을 사용하여 코드 생성하기
VSCode에서 Reactis Code Snippet 확장 프로그램을 설치했다면 
컴포넌트 코드를 간편하고 빠르게 생성할 수 있습니다. 
에디터에서 rsc를 입력하고 Enter)를 눌러 보세요.


코드를 생성하고 나면 컴포넌트 이름이 선택된 상태로 나타나는데,
여기 서 수정하면 컴포넌트 이름을 변경할 수 있고 
Tab)을 누르면 선택을 해제할 수 있습니다.

참고로 클래스형 컴포넌트는 rcc를 입력하여 사용할 수 있습니다.


3.2.3 모듈 내보내기 및 불러오기

3.2.3.1 모듈 내보내기(export)
방금 작성한 컴포넌트에서 맨 아래 코드를 확인해 보세요.

MyComponent.js - 맨 아래 코드

export default MyComponent;

이 코드는 다른 파일에서 이 파일을 import할 때, 
위에서 선 한 MyComponent 클래스를 불러오도록 설정합니다.


3.2.3.2 모듈 불러오기(import)

이번에는 App 컴포넌트에서 MyComponent 컴포넌트를 불러와서 
사용해 봅시다. 
기존에 App 컴포넌트에 있던 코드를 모두 지우고 
다음과 같이 새로 작성해 보세요.

App.js
import MyComponent from './MyComponent';
const App = () => {
return <MyComponent />;
｝；
export detauLt App;

위 코드에서 import 구문을 사용하는 
두 번째 줄은 우리가 만든 MyComponent 컴포넌트를 불러옵니다. 
코드를 저장 하고 브라우저에서 
다음과 같이 렌더링되었는지 확인해 보세요.



3.3 props
props는 properties를 줄인 표현으로 컴포넌트 속성을 설정 할 때 
사용하는 요소입니다. 
props 값은 해당 컴포넌트를 불러와 사용하는 
부모 컴포넌트(현 상황에서는 App 컴포넌트가 부모 컴포넌트입니다)에서 
설정할 수 있습니다.

3.3.1 JSX 내부에서 props 렌더링 

우선 MyComponent 컴포넌트를 수정하여 
해당 컴포넌트 에서 name이라는 props를 렌더링하도록 설정해 봅시다. 
props 값은 컴포넌트 함수의 파라미터로 받아 와서 
사용할 수 있습니다. 

props를 렌더링할 때 2장에서 배웠던 것처럼 JSX
내부에서 { } 기호로 감싸 주면 됩니다.

const MyComponent = props = {
return<div>안녕하세요, 제 이름은 {props.name}입니다.</
div>;
};
export default MyComponent;


3.3.2 컴포넌트를 사용할 때 props 값 지정하기

App 컴포넌트에서 MyComponent의 props 
값을 지정해 보겠습니다. 
App.js의 코드를 다음과 같이 수정해 보세요.
App.js

import MyComponent from './MyComponent';
const App = () => {
return <MyComponent name="React" />;
}
export default App;

코드를 저장하고 브라우저를 확인해보세요. 
다음과 같은 결과가 보이나요?


3.3.3 props 기본값 설정: defaultProps

방금 설정한 name 값을 지우고 다시 저장해 보세요.
(...)
(...)
return <MyComponent />;


현재 name 값을 지정하지 않았기 때문에 브라우저에는 
'안녕하세요, 제 이름은 입니다.'라는 내용이 보일 것입니다. 
지금 처럼 props 값을 따로 지정하지 않았을 때 
보여 줄 기본값을 설정하는 defaultProps에 대해 알아봅시다.

이 값을 설정하는 방법은 다음과 같습니다.

MyComponent.js

const MyComponent = props => {
return <div>안녕하세요, 제 이름은 {props.name}입니다.</div>;
MyComponent.defaultProps = {
name: '기본 이름' };
export default MyComponent;

파일을 저장하고 브라우저에 다음 내용이 나타났는지 확인해 보세요.


3.3.4 태그 사이의 내용을 보여 주는 children

리액트 컴포넌트를 사용할 때 컴포넌트 태그 사이의 내용을
보여 주는 props가 있는데요. 
바로 children입니다.

App 컴포넌트를 다음과 같이 한번 수정해 보세요.
App.js
import MyComponent from './MyComponent';

const App = () => {
return <MyComponent>리액트
</MyComponent>;
export detault App;

위 코드에서 MyComponent 태그 사이에 작성한 
리액트라는 문자열을 MyComponent 내부에서 보여 주려면 
props.children 값을 보여 주어야 합니다.

MyComponent를 다음과 같이 수정해 보세요.

MyComponent.js
const MyComponent = props => {
return ( <div>
안녕하세요, 제 이름은 {props.name}입니다. <br/>
children : {props.children}
입니다.
</div>
MyComponent.defaultProps = {
name : '기본 이름'
};

export default MyComponent;

브라우저에 다음과 같은 결과물이 나타났나요?


3.3.5 비구조화 할당 문법을 통해 props 내부 값 추출하기

현재 MyComponent에서 props 값을 조회할 때마다 
props.name, props.children과 같이 
props. 이라는 키워드를 앞에 붙여 주고 있습니다. 

이러한 작업을 더 편하게 하기 위해
ES6의 비구조화 할당 문법을 사용하여 
내부 값을 바로 추출하는 방법을 알아보겠습니다.

MyComponent를 다음과 같이 수정해 보세요.
MyComponent.js
const MyComponent = props => {
const { name, children } = props;
return ( <div>
안녕하세요, 제 이름은 {name}입니다. <br />

children : {children}
입니다.
</div>
);
};
MyComponent.defaultProps = {
name: '기본 이름'
};
export default MyComponent;

이렇게 코드를 작성하면 name 값과 children 값을 
더 짧은 코드로 사용할 수 있습니다.

방금 사용한, 객체에서 값을 추출하는 문법을 
비구조화 할당( destructuring assignment)이라고 부릅니다. 

이 문법은 구조 분해 문법이라고도 불리며, 
함수의 파라미터 부분에서도 사용 할 수 있습니다. 
만약 함수의 파라미터가 객체라면 
그 값을 바로 비구조화해서 사용하는 것이죠.

코드를 다음과 같이 수정해 보세요.

MyComponent.js
const MyComponent = ({ name, children }) => {
return ( <div>
안녕하세요, 제 이름은 {name}입니다. <br /> 
children 값은 {children} 입니다.
</div>
);
｝；

MyComponent.detaultprops = {
name: '기본 이름'
};
export default MyComponent;

어떤가요? 이렇게 props를 사용하면 훨씬 편하지요? 
앞으로 함수 컴포넌트에서 props를 사용할 때 
이렇게 파라미터 부분에서 비구조화 할당 문법을 사용합니다.


3.3.6 propTypes를 통한 props 검증 

컴포넌트의 필수 props를 지정하거나 props의 타입(type)을 
지정할 때는 propTypes를 사용합니다. 
컴포넌트의 propTypes를 지정하는 방법은 
defaultProp을 설정하는 것과 비슷합니다. 

우선 propTypes를 사용하려면 코드 상단에 
import 구문을 사용하여 불러와야 합니다.


MyComponent.js
import PropTypes from 'prop-types';
const MyComponent = ({ name, children }) => {
(...)
PropTypes를 불러왔다면 코드 하단에 다음과 같이 입력해 보세요.

MyComponent.js
import PropTypes from 'prop-types';

const MyComponent = ({ name, children }) => {
return (...);
MyComponent.defaultProps = {
name : '기본 이름'
MyComponent. propTypes = {
name: PropTypes.string
};
export default MyComponent;

이렇게 설정해 주면 name 값은 
무조건 문자열(string) 형태로 전달해야 된다는 것을 의미합니다. 
App 컴포넌트에서 name 값을 문자열이 아닌 숫자로 전달한 뒤 
개발자 도구의 Console 탭을 열어 보세요.

App.js

import MyComponent from './MyComponent';

const App = () => {
return <MyComponent name={3}>리액트</MyComponent〉;
export default App;

노트 크롬 개발자 도구 열기
크롬 브라우저의 개발자 도구는 페이지를 
마우스 오른쪽 버튼으로 누른 후 검사 메뉴를 선택함으로써 열 수 있습니다.

만약 컴포넌트에 설정한 props가 propTypes에서 지정한 
형태와 일치하지 않는다면 브라우저 개발자 도구의 Console
탭에 다음과 같은 결과가 나타납니다.

값이 나타나기는 했지만, 콘솔에 경고 메시지를 출력하여 
개발자에게 propTypes가 잘못되었다는 것을 알려 줍니다. 
오류 메시지를 확인했다면 name 값을 제대로 설정해 주세요.

App.js
import MyComponent from './MyComponent';
const App = () => {
return <MyComponent name="React">리액트</MyComponent>;
};
export default App;

이제 오류가 사라졌나요?


3.3.6.1 isRequired를 사용하여 필수 propTypes
설정
propTypes를 지정하지 않았을 때 경고 메시지를 띄워 주는 
작업을 해 봅시다. 

propTypes를 지정할 때 뒤에 isRequired 를 붙여 주면 됩니다. 
이번에는 favoriteNumber라는 숫자를 필수 props로 지정 해보겠습니다.

MyComponent.js
import PropTypes from 'prop-types';

const MyComponent = ({ name, favoriteNumber, children }) => {
  return (
    <div>
      안녕하세요, 제 이름은 {name}입니다. <br />
      children 값은 {children}입니다. <br />
      제가 좋아하는 숫자는 {favoriteNumber}입니다.
    </div>
  );
};

MyComponent.defaultProps = {
  name: '기본 이름',
};

MyComponent.propTypes = {
  name: PropTypes.string,
  favoriteNumber: PropTypes.number.isRequired,
};

export default MyComponent;


코드를 저장하고 다시 개발자 도구의 Console을 확인해 보세요. 
아직 favoriteNumber를 설정하지 않았기 때문에 
다음 과 같은 경고가 나타날 것입니다.
 
경고를 확인했다면 MyComponent에게 favoriteNumber 
값을 제대로 전달해 보세요.

App.js
import MyComponent from './MyComponent';

const App = () => {
  return (
    <div>
      <MyComponent name="React" favoriteNumber={1}>
        리액트
      </MyComponent>
    </div>
  );
};

export default App;


3.3.6.2 더 많은 PropTypes 종류

PropTypes에서는 여러 가지 종류를 설정할 수 있습니다. 
어 떤 것이 있는지 짚고 넘어가 봅시다.
  array: 배열
  arrayof(다른 PropType): 특정 PropType으로 이루어진 
  배열을 의미합니다. 예를 들어 arrayof(PropTypes  number)는 숫
  자로 이루어진 배열입니다.
  bool: true 혹은 false 값
  func: 함수
  number: 숫자
  object: 객체
  string: 문자열
  symbol: ES6 Symbol
  node : 렌더링할 수 있는 모든 것(숫자, 문자열, 혹은 JSX 코드. 
  Children도 node PropType입니다.)
  instanceof(클래스): 특정 클래스의 인스턴스(예: instance0f(MyClass))
  oneof (['dog', 'Cat']): 주어진 배열 요소 중 값 하나
  onelfType ([React.PropTypes.string, PropTypes.number 1): 
  주어진 배열 안의 종류 중 하나
  objectof(React.PropTypes.number): 
  객체의 모든 키 값이 인자로 주어진 PropType인 객체
  shape({ name: PropTypes.string, num: PropTypeS. number }): 
  주어진 스키마를 가진 객체
• any: 아무 종류
더 자세한 정보는 https://github.com/facebook/prop-types에서 
확인할 수 있습니다.



3.3.7 클래스형 컴포넌트에서 props 사용하기 
클래스형 컴포넌트에서 props를 사용할 때는 
render 함수에서 this.props를 조회하면 됩니다. 

그리고 defaultprops와 propTypes는 똑같은 
방식으로 설정할 수 있습니다. 
MyComponent를 다음과 같이 클래스형 컴포넌트로 변환해 보세요.

MyComponent.js
import React, { Component } from 'react';
import PropTypes from 'prop-types';

class MyComponent extends Component {
  render() {
    const { name, favoriteNumber, children } = this.props; // 비구조화 할당
    return (
      <div>
        안녕하세요, 제 이름은 {name}입니다. <br />
        children 값은 {children}입니다. <br />
        제가 좋아하는 숫자는 {favoriteNumber}입니다.
      </div>
    );
  }
}

// 기본 props 설정
MyComponent.defaultProps = {
  name: '기본 이름',
};

// props 타입 정의
MyComponent.propTypes = {
  name: PropTypes.string,
  favoriteNumber: PropTypes.number.isRequired,
};

export default MyComponent;

클래스형 컴포넌트에서 defaultProps와 propTypes를 설정 할 때 
cLass 내부에서 지정하는 방법도 있습니다.

import React, { Component } from 'react';
import PropTypes from 'prop-types';

class MyComponent extends Component {
  // 기본 props 설정
  static defaultProps = {
    name: '기본 이름',
  };

  // props 타입 정의
  static propTypes = {
    name: PropTypes.string,
    favoriteNumber: PropTypes.number.isRequired,
  };

  render() {
    const { name, favoriteNumber, children } = this.props; // 비구조화 할당
    return (
      <div>
        안녕하세요, 제 이름은 {name}입니다. <br />
        children 값은 {children}입니다. <br />
        제가 좋아하는 숫자는 {favoriteNumber}입니다.
      </div>
    );
  }
}

export default MyComponent;


노트
defaultProps와 propTypes는 꼭 사용해야 하나요?
이 두 가지 설정은 컴포넌트의 필수 사항이 아니므로 
꼭 사용할 필요가 없습니다. 
하지만 여러분이 React를 사용하여 
큰 규모의 프로젝트를 진 행한다면, 
특히 다른 개발자들과 협업한다면 해당 컴포넌트에 
어떤 props가 필요한지 쉽게 알 수 있어 개발 능률이 좋아질 것입니다.


3.4 state

리액트에서 state는 컴포넌트 내부에서 바뀔 수 있는 값을 의미합니다. 

props는 컴포넌트가 사용되는 과정에서 부모 컴포넌트가 설정하는 값이며, 
컴포넌트 자신은 해당 props를 읽기 전용으로만 사용할 수 있습니다. 

props를 바꾸려면 부모 컴포넌트에서 바꾸어 주어야 합니다. 
예를 들어 
현재 상황 에서는 App 컴포넌트에서 MyComponent를 사용할 때 
props를 바꾸어 주어야 값이 변경될 수 있는 것이죠. 

반면 MyComponent에서는 전달받은 name 값을 직접 바꿀 수 없습니다.

리액트에는 두 가지 종류의 State가 있습니다. 
하나는 클래스형 컴포넌트가 지니고 있는 State이고, 
다른 하나는 함수 컴포넌트에서 usestate라는 함수를 통해 
사용하는 state입니다.

3.4.1 클래스형 컴포넌트의 state

새로운 컴포넌트를 만들어 주세요. 
Counter.js 파일을 Src 디렉터리에 생성하여 다음 코드를 작성해 보세요.
Counter.js
import React, { Component } from 'react';

class Counter extends Component {
  constructor(props) {
    super(props);

    // state의 초깃값 설정하기
    this.state = {
      number: 0,
    };
  }

  render() {
    const { number } = this.state; // state를 조회할 때는 this.state로 조회합니다.
    return (
      <div>
        <h1>{number}</h1>
        <button
          // onClick을 통해 버튼이 클릭되었을 때 호출할 함수를 지정합니다.
          onClick={() => {
            // this.setState를 사용하여 state에 새로운 값을 넣을 수 있습니다.
            this.setState({ number: number + 1 });
          }}
        >
          +1
        </button>
      </div>
    );
  }
}

export default Counter;


위 파일에서 각 코드가 어떤 역할을 하는지 알아보겠습니다.
컴포넌트에 state를 설정할 때는 다음과 같이 constructor
메서드를 작성하여 설정합니다.
constructor (props) {

super(props);
// state의 초깃값 설정하기
this.state = {
number: 0
}
}
이는 컴포넌트의 생성자 메서드인데요. 
클래스형 컴포넌트에 서 constructor를 작성할 때는 
반드시 Super(props)를 호 출해 주어야 합니다. 

이 함수가 호출되면 현재 클래스형 컴포넌트가 상속받고 있는 
리액트의 Component 클래스가 지닌 생성자 함수를 호출해 줍니다.

그다음에는 this.state 값에 초깃값을 설정해 주었습니다.
컴포넌트의 state는 객체 형식이어야 합니다.
이제 render 함수를 확인해 봅시다.

render () {
const { number } = this.state; 
// state를 조회할 때는 this.state로 조회합니다.
return ( <div>
<h1>tnumber 5</h1>
<button
// onclick을 통해 버튼이 클릭되었을 때 호출할
함수를 지정합니다.
onClick=f() => {
// this.setstate를 사용하여 State에 새로운 값
을 넣을 수 있습니다.
this.setState({ number: number + 1 3);
}}
+1
</button>
</div>
}

render 함수에서 현재 State를 조회할 때는 
this.state를 조회하면 됩니다. 

그리고 button 안에 onClick이라는 값을 props로 넣어 주었는데, 
이는 버튼이 클릭될 때 호출시킬 함 수를 설정할 수 있게 해 줍니다. 

이를 이벤트를 설정한다고 하는데요, 
리액트의 이벤트 시스템은 4장에서 더 자세히 알 아보겠습니다.

이벤트로 설정할 함수를 넣어 줄 때는 화살표 함수 문법을 
사용하여 넣어 주어야 합니다. 

함수 내부에서는 this.setState라는 함수를 사용했는데요. 
이 함수가 state 값을 바꿀 수 있게 해 줍니다.

코드를 다 작성했으면 Counter 컴포넌트를 
App에서 불러와 렌더링하세요. 
기존 MyComponent 는 이제 필요 없으니 없애 주겠습니다.

App.js
import Counter from './Counter';
const App = () => {
return <Counter />;
}
export default App;

브라우저에서 다음과 같이 숫자와 버튼이 나타났나요? 
버튼 을 눌러 보세요. 숫자가 1씩 잘 올라가나요?


3.4.1.1 state 객체 안에 여러 값이 있을 때 

state 객체 안에는 여러 값이 있을 수 있습니다. 
Counter 컴포넌트를 다음과 같이 한번 수정해 보세요.

Counter.js

import React, { Component } from 'react';

class Counter extends Component {
  constructor(props) {
    super(props);
    // state의 초깃값 설정하기
    this.state = {
      number: 0,
      fixedNumber: 0,
    };
  }

  render() {
    const { number, fixedNumber } = this.state; // state를 조회할 때는 this.state로 조회합니다.
    return (
      <div>
        <h1>{number}</h1>
        <h2>바뀌지 않는 값: {fixedNumber}</h2>
        <button
          // onClick을 통해 버튼이 클릭되었을 때 호출할 함수를 지정합니다.
          onClick={() => {
            // this.setState를 사용하여 state에 새로운 값을 넣을 수 있습니다.
            this.setState({ number: number + 1 });
          }}
        >
          +1
        </button>
      </div>
    );
  }
}

export default Counter;


현재 State 안에 fixedNumber라는 또 
다른 값을 추가해 주 었습니다. 
버튼이 클릭될 때 fixedNumber 값은 그대로 두고 
number 값만 바꿀 것인데요. 

그렇다고 해서 this.setState 함수를 사용할 때 
인자로 전달되는 개체 내부에 fixedNumber를 넣어 주지는 않았습니다. 
this. setState 함수는 인자로 
전달된 객체 안에 들어 있는 값만 바꾸어 줍니다.

코드를 저장하고 브라우저를 열어서 버튼을 눌러 보세요. 
맨 위에 있는 숫자만 업데이트되고 하단의 숫자는 잘 고정되어 있나요?



3.4.1.2 state를 constructor에서 꺼내기 앞에서 
State의 초깃값을 지정하기 위해 
constructor 메서드를 선언해 주었는데요. 

또 다른 방식으로도 state의 초깃 값을 지정해 줄 수 있습니다.
코드를 다음과 같이 수정해 보세요.

Counter.js

import React, { Component } from 'react';

class Counter extends Component {
  // state의 초깃값 설정
  state = {
    number: 0,
    fixedNumber: 0,
  };

  render() {
    const { number, fixedNumber } = this.state; // state를 조회할 때는 this.state로 조회합니다.
    return (
      <div>
        <h1>{number}</h1>
        <h2>바뀌지 않는 값: {fixedNumber}</h2>
        <button
          // onClick을 통해 버튼이 클릭되었을 때 호출할 함수를 지정합니다.
          onClick={() => {
            // this.setState를 사용하여 state에 새로운 값을 넣을 수 있습니다.
            this.setState({ number: number + 1 });
          }}
        >
          +1
        </button>
      </div>
    );
  }
}

export default Counter;


이렇게 하면 constructor 메서드를 선언하지 않고도 
State 초깃값을 설정할 수 있습니다. 


3.4.1.3 this.setState에 객체 대신 함수 인자 전달 하기


this.setState를 사용하여 State 값을 업데이트할 때는 
상태가 비동기적으로 업데이트됩니다. 

만약 다음과 같이 onClick에 설정한 함수 내부에서 
this.setState를 두 번 호출하 면 어떻게 될까요?

Counter.js - button onClick

onClick={() => {
// this.setstate를 사용하여 state에 새로운 값을 넣 을 수 있습니다.

this.setState({ number: number + 1 }); 
this.setState({ number: this.state.number + 1 });

코드를 위와 같이 작성하면 this.setState를
두 번 사용하 는 것임에도 불구하고 버튼을 클릭할 때 
숫자가 1씩 더해집 니다. 

this.setState를 사용한다고 해서 State 
값이 바로 바뀌지는 않기 때문입니다.

이에 대한 해결책은 this.setState를 사용할 때 
객체 대신 에 함수를 인자로 넣어 주는 것입니다. 

this.setState의 인자로 함수를 넣어 줄 때는
 코드를 다음과 같은 형식으로 작성 합니다.

this.setState((prevState, props) => {
return {
// 업데이트하고 싶은 내용
｝
｝）
여기서 prevState는 기존 상태이고,
props는 현재 지니고 있는 props를 가리킵니다. 
만약 업데이트하는 과정에서 props 필요하지 않다면 생략해도 됩니다.

기존 코드를 다음과 같이 작성해 보세요.
Counter.js - button

<button
// onclick을 통해 버튼이 클릭되었을 때 호출할 함수 를 지정합니다.
onClick={() => {
this.setState(prevState = {
return {
number: prevState.number + 1
});

// 위 코드와 아래 코드는 완전히 똑같은 기능을 함
// 아래 코드는 함수에서 바로 객체를 반환한다는 의미
this.setState(prevState =› ({
number: prevState. number + 1
>
｝｝
+1
</button>

화살표 함수에서 값을 바로 반환하고 싶다면 
코드 블록 { } 를 생략하면 됩니다. 

예를 들어, 파라미터 a와 b를 받아 와서 
합을 구해 주는 함수를 작성하고 싶다면 다음과 같이 작성할 수 있습니다.

const sum = (a, b) => a + b;

onClick 두 번째로 this.setState 함수를 사용할 때는 
화살표 함수에서 바로 객체를 반환하도록 했기 때문에 
prevs tate => ({ })와 같은 형태로 코드가 이루어집니다.
브라우저에서 버튼을 눌러 보세요. 숫자가 2씩 올라가나요?


3.4.1.4 this.setState가 끝난 후 특정 작업 실행하기


setState를 사용하여 값을 업데이트하고 난 다음에 
특정 작업을 하고 싶을 때는 setState의 
두 번째 파라미터로 콜백(callback) 함수를 등록하여 
작업을 처리할 수 있습니다.

onCLick 함수를 다음과 같이 수정해 보세요.

Counter.js - button

<button
  // onClick을 통해 버튼이 클릭되었을 때 호출할 함수를 지정합니다.
  onClick={() => {
    this.setState(
      { number: this.state.number + 1 },
      () => {
        console.log('방금 setState가 호출되었습니다.');
        console.log(this.state);
      }
    );
  }}
>
  +1
</button>

이렇게 콜백 함수를 등록한 뒤 브라우저를 열어서 
버튼을 누르고 개발자 도구의 Console 탭을 확인해 보세요.


3.4.2 함수 컴포넌트에서 useState 사용하기 

리액트 16.8 이전 버전에서는 함수 컴포넌트에서 
State를 사용할 수 없었습니다. 
하지만 16.8 이후부터는 usestate라는 함수를 사용하여 
함수 컴포넌트에서도 State를 사용할 수 있게 되었습니다. 
사용법은 조금 다릅니다.

이 과정에서 Hooks라는 것을 사용하게 되는데요. 
Hooks의종류는 다양하지만, 
이 장에서는 useState만 배워 보고 

나머지는 8장에서 이어서 공부해 보겠습니다.


3.4.2.1 배열 비구조화 할당
Hooks를 사용하기 전에 배열 비구조화 할당이라는 것을 알 아봅시다. 
배열 비구조화 할당은 이전에 배운 객체 비구조화 할당과 비슷합니다. 
즉, 배열 안에 들어 있는 값을 쉽게 추출 할 수 있도록 해 주는 문법입니다.

다음 코드를 한번 확인해 주세요.
const array = [1, 21;
const one = array|01;
const two = array[1];

array 안에 있는 값을 one과 two에 담아 주는 코드인데요.

위 코드는 배열 비구조화 할당을 사용하면 다음과 같이 표현 할 수 있습니다.

const array = [1, 2];
const [one, two] = array;
훨씬 깔끔하지요?

3.4.2.2 useState 사용하기
배열 비구조화 할당 문법을 알고 나면 useState 
사용 방법을 쉽게 이해할 수 있습니다. 
새 컴포넌트를 만들어서 usestate 를 사용해 보겠습니다.
src 디렉터리에 Say.js라는 파일을 생 성하고 다음 코드를 작성해 보세요.

Say.js

import React, { useState } from 'react';

const Say = () => {
  const [message, setMessage] = useState('');

  const onClickEnter = () => setMessage('안녕하세요!');
  const onClickLeave = () => setMessage('안녕히 가세요!');

  return (
    <div>
      <button onClick={onClickEnter}>입장</button>
      <button onClick={onClickLeave}>퇴장</button>
      <h1>{message}</h1>
    </div>
  );
};

export default Say;



useState 함수의 인자에는 상태의 초깃값을 넣어줍니다. 
클래스형 컴포넌트에서의 State 초깃값은 
객체 형태를 넣어 주 어야 한다고 배웠는데요. 

usestate에서는 반드시 객체가 아니어도 상관없습니다. 
값의 형태는 자유입니다. 
숫자일 수도, 문자열일 수도, 객체일 수도, 배열일 수도 있습니다.

함수를 호출하면 배열이 반환되는데요. 
배열의 첫 번째 원소 는 현재 상태이고,
두 번째 원소는 상태를 바꾸어 주는 함수 입니다. 
이 함수를 세터(Setter) 함수라고 부릅니다. 

그리고 배열 비구조화 할당을 통해 
이름을 자유롭게 정해 줄 수 있습 니다. 

현재 message와 SetMessage라고 이름을 설정해 주었는데요. 
text와 setText라고 이름을 자유롭게 바꾸어 주어도 상관없습니다.

한번 Say 컴포넌트를 App에서 렌더링해 보고 
입장 버튼과 퇴장 버튼을 눌러 보세요.

App.js

import Say from './Say';

const App = () => {
  return <Say />;
};

export default App;



문구가 잘 보이나요?

3.4.2.3 한 컴포넌트에서 useState 여러 번 사용하기


useState는 한 컴포넌트에서 여러 번 사용해도 상관없습니다. 
또 다른 상태를 UseState로 한번 관리해 봅시다.

Say.js

import React, { useState } from 'react';

const Say = () => {
  const [message, setMessage] = useState('');
  const [color, setColor] = useState('black');

  const onClickEnter = () => setMessage('안녕하세요!');
  const onClickLeave = () => setMessage('안녕히 가세요!');

  return (
    <div>
      <button onClick={onClickEnter}>입장</button>
      <button onClick={onClickLeave}>퇴장</button>
      <h1 style={{ color }}>{message}</h1>
      <button style={{ color: 'red' }} onClick={() => setColor('red')}>
        빨간색
      </button>
      <button style={{ color: 'green' }} onClick={() => setColor('green')}>
        초록색
      </button>
      <button style={{ color: 'blue' }} onClick={() => setColor('blue')}>
        파란색
      </button>
    </div>
  );
};

export default Say;



코드를 저장하고 입장 버튼을 눌러서 텍스트를 띄워 보세요.

그리고 색상이 표시되어 있는 버튼을 눌러 보세요. 
텍스트 색 상이 잘 바뀌나요?


3.5 state를 사용할 때 주의 사항
클래스형 컴포넌트든 함수 컴포넌트든 state를 사용할 때는 
주의해야 할 사항이 있습니다. 

state 값을 바꾸어야 할 때는 setState 혹은 useState를 통해 
전달받은 세터 함수를 사용 해야 합니다.

예를 들어 다음 코드는 잘못된 코드입니다.

// 클래스형 컴포넌트에서...
this.state.number = this.state.number + 1;
this.state.array = this.array.push(2);
this.state.object.vaLue = 5;

// 함수형 컴포넌트에서...
const [object, setobject] = usestate({ a: 1, b: 1});
object.b = 2;

그렇다면 배열이나 객체를 업데이트해야 할 때는 
어떻게 해 야 할까요? 
이런 상황에서는 배열이나 객체 사본을 만들고 
그 사본에 값을 업데이트한 후, 

그 사본의 상태를 setState 혹은 세터 함수를 통해 업데이트합니다.
사본을 만들어서 업데이트하는 예시는 다음과 같습니다.

// 객체 다루기
const object = { a: 1, b: 2, C: 3 };
const nextobject= {object, b: 2 3; 
// 사본을 만들어 서 0 값만 덮어 쓰기
// 배열 다루기
const array = [
{id: 1, value: true }, {id: 2, value: true },

{ id: 3, value: false }
];

let nextArray = array.concat({ id: 4 }); // 새 항목 추가
nextArray.filter(item = item.id != = 2); // id7: 29 항목 제거

nextArray.map(item => (item.id === 1?{...item, value:
false } : ltem)); // Id가 1인 항복의 value를 false로 설정

객체에 대한 사본을 만들 때는 spread 연산자라 불리는 ...을 사용하여 
처리하고, 
배열에 대한 사본을 만들 때는 배열의 내 함수들을 활용합니다. 
이에 대한 자세한 내용은 이후 차 근차근 배워 보겠습니다.

3.6 정리
이 장에서는 컴포넌트를 만들어서 내보내고 불러오는 방법과
props 및 state를 사용하는 방법을 배워 보았습니다. 

props 와 state는 둘 다 컴포넌트에서 사용하거나 
렌더링할 데이터 를 담고 있으므로 비슷해 보일 수 있지만, 
그 역할은 매우 다릅니다. 

props는 부모 컴포넌트가 설정하고, 
State는 컴포넌트 자체적으로 지닌 값으로 컴포넌트 
내부에서 값을 업데이트할 수 있습니다.

props를 사용한다고 해서 값이 무조건 고정적이지는 않습니다. 
부모 컴포넌트의 state를 자식 컴포넌트의 props로 전달 하고, 
자식 컴포넌트에서 특정 이벤트가 발생할 때 
부모 컴포 넌트의 메서드를 호출하면 props도 유동적으로 
사용할 수 있습니다. 

이후 만들어 볼 일정 관리 애플리케이션에서 
이러한 구조로 프로젝트를 설계하게 됩니다.

이 장에서는 state를 다루기 위해 
클래스형 컴포넌트의 state와 함수 컴포넌트의 
useState에 대해 배워 보았는데요. 
앞으로 새로운 컴포넌트를 만들 때는 usestate를 사용할 것을 권장합니다. 

이로써 코드가 더 간결해질 뿐만 아니라, 
리액트 개발 팀이 함수 컴포넌트와 Hooks를 사용하는 것이 
주요 컴포넌트 개발 방식이 될 것이라고 공지했기 때문입니다.
