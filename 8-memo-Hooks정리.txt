8장Hooks
8.1 useState
8.2 useEffect
8.3 useReducer
8.4 useMemo
8.5 useCallback
8.6 useRef
8.7 커스텀 Hooks 만들기
8.8 ₴ Hooks
8.9 정리

Hooks는 리액트 v16.8에 새로 도입된 기능으로 
함수 컴포넌트에서도 상태 관리를 할 수 있는 usestate, 

렌더링 직후 작업을 설정하는 useEffect 등의 기능을 제공하여 
기존의 함수 컴포넌트에서 할 수 없었던 다양한 작업을 할 수 있게 해줍니다.

이번 실습은 다음과 같은 흐름으로 진행됩니다.

리액트 내장 Hooks 사용하기
커스텀 Hooks 만들기

실습을 진행하기 위해 create-react-app을 사용하여 
새로 운프로젝트를 생성해 주세요.
$ yarn create react-app hooks-tutorial


8.1 useState

useState는 가장 기본적인 Hook이며, 
함수 컴포넌트에서도 가변적인 상태를 지닐 수 있게 해 줍니다. 

3장에서도 이미 사용해 보았는데, 이번 장에서 다시 복습해 봅시다. 
만약 함수 컴포넌트에서 상태를 관리해야 한다면 
이 Hook을 사용하면 됩니다.

usestate 기능을 사용해서 
숫자 카운터를 구현해 보겠습니다. 

Src 디렉터리에 Counter.js 파일을 생성하고 
다음 코드 를 입력해 보세요.

Counter.js

import React, { useState } from 'react';

const Counter = () => {
  const [value, setValue] = useState(0);

  return (
    <div>
      <p>현재 카운터 값은 <b>{value}</b>입니다.</p>
      <button onClick={() => setValue(value + 1)}>+1</button>
      <button onClick={() => setValue(value - 1)}>-1</button>
    </div>
  );
};

export default Counter;

useState는 코드 상단에서 import 구문을 통해 불러오고,
다음과 같이 사용합니다.

const [value, setValue] = usestate(0);

usestate 함수의 파라미터에는 상태의 기본값을 넣어줍니다. 
현재 0을 넣어 주었는데, 

결국 카운터의 기본값을 0으로 설정하겠다는 의미입니다. 
이 함수가 호출되면 배열을 반환 하는데요, 
그 배열의 첫 번째 원소는 상태값, 
두 번째 원소는 상태를 설정하는 함수입니다. 

이 함수에 파라미터를 넣어서 호출하면 전달받은 파라미터로 
값이 바뀌고 컴포넌트가 정상적으로 리렌더링됩니다.

코드를 이해하고 다 작성했다면, 
App 컴포넌트를 열어서 기존에 보여 주던 내용을 
다 지우고 Counter 컴포넌트를 렌더링하세요.

App.js

import Counter from './Counter';

const App = () => {
  return <Counter />;
};

export default App;

그리고 터미널에 yarn start 명령어를 입력하여 개발 서버 를 구동하세요.

+1, -1 버튼을 눌러 보세요. 카운터가 잘 작동하나요? 
어떤 가요? 함수 컴포넌트에서 상태 관리를 하기 위해 
컴포넌트 코드를 굳이 클래스 형태로 변환할 필요가 없어서 매우 편리 하죠?


8.1.1 useState를 여러 번 사용하기 

하나의 usestate 함수는 하나의 상태 값만 관리할 수 있습니다. 
컴포넌트에서 관리해야 할 상태가 여러 개라면 
usestate 를 여러 번 사용하면 됩니다.

이번에는 src 디렉터리에 Info.js 파일을 생성하여 
다음 코드를 작성해 보세요.

Info.js

import React, { useState } from 'react';

const Info = () => {
  const [name, setName] = useState('');
  const [nickname, setNickname] = useState('');

  const onChangeName = (e) => {
    setName(e.target.value);
  };

  const onChangeNickname = (e) => {
    setNickname(e.target.value);
  };

  return (
    <div>
      <div>
        <input value={name} onChange={onChangeName} />
        <input value={nickname} onChange={onChangeNickname} />
      </div>
      <div>
        <div>
          <b>이름:</b> {name}
        </div>
        <div>
          <b>닉네임:</b> {nickname}
        </div>
      </div>
    </div>
  );
};

export default Info;


다음으로 App 컴포넌트에서 이 컴포넌트를 렌더링해 보세요.
App.js

import Info from './Info';

const App = () => {
  return <Info />;
};

export default App;

이제 화면을 확인해 볼까요?

관리할 상태가 여러 개인 경우에도 useState로 편하게 관리 할 수 있겠죠?


_
8.2 useEffect
useEffect는 리액트 컴포넌트가 렌더링될 때마다 
특정 작업을 수행하도록 설정할 수 있는 Hook입니다. 

클래스형 컴포넌트의 componentDidMount와 componentDidUpdate를 
합친 형태로 보아도 무방합니다.

기존에 만들었던 Info 컴포넌트에 useEffect를 한번 적용해 보겠습니다.

Info.js

import { useState, useEffect } from 'react';

const Info = () => {
  const [name, setName] = useState('');
  const [nickname, setNickname] = useState('');

  useEffect(() => {
    console.log('렌더링이 완료되었습니다!');
    console.log({
      name,
      nickname,
    });
  }, [name, nickname]); // name과 nickname이 변경될 때마다 useEffect 실행

  const onChangeName = (e) => {
    setName(e.target.value);
  };

  const onChangeNickname = (e) => {
    setNickname(e.target.value);
  };

  return (
    <div>
      <div>
        <input value={name} onChange={onChangeName} placeholder="이름" />
        <input value={nickname} onChange={onChangeNickname} placeholder="닉네임" />
      </div>
      <div>
        <div>
          <b>이름:</b> {name}
        </div>
        <div>
          <b>닉네임:</b> {nickname}
        </div>
      </div>
    </div>
  );
};

export default Info;


이제 브라우저에서 개발자 도구를 열고 인풋의 내용을 변경 해보세요.



8.2.1 마운트될 때만 실행하고 싶을 때

useEffect에서 설정한 함수를 컴포넌트가 
화면에 맨 처음 렌더링될 때만 실행하고, 

업데이트될 때는 실행하지 않으려면 
함수의 두 번째 파라미터로 비어있는 배열을 넣어 주면 됩니다.

기존 useEffect 코드를 다음과 같이 변경해 보세요.

Info.js - useEffect

 useEffect(() => {
    console.log('렌더링이 완료되었습니다!');
  }, []); 


코드를 작성한 뒤에 다시 브라우저를 열어서 인풋을 수정해 보세요. 
컴포넌트가 처음 나타날 때만 콘솔에 문구가 나타나고, 
그 이후에는 나타나지 않을 것입니다.

마운트될 때만 실행하기


8.2.2 특정 값이 업데이트될 때만 실행하고 싶을때

useEffect를 사용할 때, 
특정 값이 변경될 때만 호출하고 싶을 경우도 있겠지요? 

클래스형 컴포넌트라면 다음과 같이 작성할 것입니다.

componentDidUpdate (prevProps, prevState) {
if (prevProps.value != = this.props.value) {
doSomething);
｝

이 코드는 props 안에 들어 있는 value 값이 
바뀔때만 특정 작업을 수행합니다. 

이러한 작업을 useEffect에서 해야 한다면, 어떻게 해야 할까요?

바로 useEffect의 두 번째 파라미터로 전달되는 
배열 안에 검사하고 싶은 값을 넣어 주면됩니다. 

Info 컴포넌트의 useEffect 부분을 다음과 같이 한번 수정해 보세요.

Info.js - useEffect

useEffect(() => {
console. log (name);
}, [name]);

배열 안에는 useState를 통해 관리하고 있는 상태를 
넣어 주어도 되고, props로 전달받은 값을 넣어 주어도 됩니다.

특정 값이 업데이트될 때만 실행하기


8.2.3 뒷정리하기
useEffect는 기본적으로 렌더링되고 난 직후마다 실행되며, 
두 번째 파라미터 배열에 무엇을 넣는지에 따라 실행되는 
조건이 달라집니다.

컴포넌트가 언마운트되기 전이나 업데이트되기 직전에 
어떠한 작업을 수행하고 싶다면 

useEffect에서 뒷정리(cleanup)함수를 반환해 주어야 합니다.

Info 컴포넌트의 useEffect 부분을 다음과 같이 수정해 보세요.

Info.js - useEffect

useEffect(() => {
console. log('effect');
console. log (name);
return () => {
console. log('cleanup');
console. log (name);
｝；
}, [namel);

이제 App 컴포넌트에서 Info 컴포넌트의 가시성을 
바꿀수 있게 해 봅시다. 
이번에도 useState를 사용하여 상태를 관리 해 보세요!

import React, { useState } from 'react';
import Info from './Info'; // 파일 경로 수정

const App = () => {
  const [visible, setVisible] = useState(false);

  return (
    <div>
      <button
        onClick={() => {
          setVisible(!visible);
        }}
      >
        {visible ? '숨기기' : '보이기'}
      </button>
      <hr />
      {visible && <Info />}
    </div>
  );
};

export default App;


다 작성했다면 상단의 보이기/숨기기 버튼을 눌러 보세요.

useEffect 뒷정리

컴포넌트가 나타날 때 콘솔에 effect가 나타나고, 
사라질 때 cleanup이 나타납니다.
그다음에는 인풋에 이름을 적어 보고 
콘솔에 어떤 결과가 나타나는지 확인해 보세요.

업데이트할 때마다 발생하는 effect와 cleanup

렌더링될 때마다 뒷정리 함수가 계속 나타나는 것을 확인할 수 있습니다. 
그리고 뒷정리 함수가 호출될 때는 

업데이트 되기 직전의 값을 보여 줍니다.

오직 언마운트될 때만 뒷정리 함수를 호출하고 싶다면 
useEffect 함수의 두 번째 파라미터에 비어 있는 배열을 넣으면 됩니다.

Info.js - useEffect
useEffect(() =>
{
console.log('effect');
return () => {
console. log ('unmount');
}, []);



8.3 useReducer
useReducer는 usestate보다 더 다양한 컴포넌트 
상황에 따라 다양한 상태를 다른 값으로 업데이트 해주고 싶을 때 
사용 하는 Hook입니다. 

리듀서(reducer)라는 개념은 17장에서 
리덕스를 배울 때 더 자세히 알아보겠습니다. 

여기서 다루는 내용이 어렵다고 느껴진다면 17장을 보고 나서 
이 내용을 다시 한 번 확인해 보세요.

리듀서는 
현재 상태, 그리고 업데이트를 위해 필요한 정보를 
담은 액션(action) 값을 전달받아 

새로운 상태를 반환하는 함수입니다. 

리듀서 함수에서 새로운 상태를 만들 때는 반드시 불변성을 지켜 주어야 합니다.

function reducer(state, action) {
return { ... }; // 불변성을 지키면서 업데이트한 새로운 상태를 반환합니다.
}
액션 값은 주로 다음과 같은 형태로 이루어져 있습니다.
{
type: 'INCREMENT',
// 다른 값들이 필요하다면 추가로 들어감 }

17장에서 다룰 리덕스에서 사용하는 
액션 객체에는 어떤 액선인지 
알려 주는 type 필드가 꼭 있어야 하지만, 
UseReducer에서 사용하는 액션 객체는 
반드시 type을 지니고 있을 필요가 없습니다. 

심지어 객체가 아니라 문자열이나 숫자여도 상관없습니다.


8.3.1 카운터 구현하기

먼저 useReducer를 사용하여 
기존의 Counter 컴포넌트를 다시 구현해 보세요.

Counter.js

import React, { useReducer } from 'react';

function reducer(state, action) {
  // action.type에 따라 다른 작업 수행
  switch (action.type) {
    case 'INCREMENT':
      return { value: state.value + 1 };
    case 'DECREMENT':
      return { value: state.value - 1 };
    default:
      // 아무것도 해당되지 않을 때 기존 상태 반환
      return state;
  }
}

const Counter = () => {
  const [state, dispatch] = useReducer(reducer, {
    value: 0, // 초기 상태
  });

  return (
    <div>
      <p>
        현재 카운터 값은 <b>{state.value}</b>입니다.
      </p>
      <button onClick={() => dispatch({ type: 'INCREMENT' })}>+1</button>
      <button onClick={() => dispatch({ type: 'DECREMENT' })}>-1</button>
    </div>
  );
};

export default Counter;


_


useReducer의 첫 번째 파라미터에는 리듀서 함수를 넣고, 
두 번째 파라미터에는 해당 리듀서의 기본값을 넣어 줍니다. 

이 Hook을 사용하면 state 값과 dispatch 함수를 받아 오는데요. 

여기서 State는 현재 가리키고 있는 상태고, 
dispatch는 액션을 발생시키는 함수입니다. 

dispatch(action)과 같은 형태로, 
함수 안에 파라미터로 액션 값을 넣어 주면 

리듀서 함수가 호출되는 구조입니다.

useReducer를 사용했을 때의 가장 큰 장점은 

컴포넌트 업데이트 로직을 컴포넌트 바깥으로 빼낼 수 있다는 것입니다.

코드를 다 작성했다면, 
ApP에서 Counter를 다시 렌더링해 주고 브라우저에서 +1/-1 버튼을 눌러 보세요.
App

import Counter from './Counter';

const App = () => {
  return <Counter />;
};

export default App;


이전과 마찬가지로 잘 작동하나요?


8.3.2 인풋 상태 관리하기 

이번에는 useReducer를 사용하여 
Info 컴포넌트에서 인풋 상태를 관리해 보겠습니다. 

기존에는 인풋이 여러 개여서 useState를 여러 번 사용했는데요. 

useReducer를 사용하면 기존에 클래스형 컴포넌트에서 
input 태그에 name 값을 할당 하고 

e.target.name을 참조하여 SetState를 해 준 것과 
유사한 방식으로 작업을 처리할 수 있습니다.

Info 컴포넌트를 다음과 같이 한번 수정해 보세요.

Info.js
import React, { useReducer } from 'react';

function reducer(state, action) {
  return {
    ...state,
    [action.name]: action.value,
  };
}

const Info = () => {
  const [state, dispatch] = useReducer(reducer, {
    name: '',
    nickname: '',
  });

  const { name, nickname } = state;

  const onChange = (e) => {
    dispatch({
      name: e.target.name,
      value: e.target.value,
    });
  };

  return (
    <div>
      <div>
        <input name="name" value={name} onChange={onChange} placeholder="이름" />
        <input name="nickname" value={nickname} onChange={onChange} placeholder="닉네임" />
      </div>
      <div>
        <div>
          <b>이름:</b> {name}
        </div>
        <div>
          <b>닉네임:</b> {nickname}
        </div>
      </div>
    </div>
  );
};

export default Info;



useReducer에서의 액션은 그 어떤 값도 사용 가능합니다. 
그래서 이번에는 이벤트 객체가 지니고 있는

e.target 값 자체를 액션 값으로 사용했습니다. 

이런 식으로 인풋을 관리하면 아무리 인풋의 개수가 많아져도 
코드를 짧고 깔끔하게 유지 할 수 있습니다.

코드를 다 작성했으면 App에서 
Info 컴포넌트를 렌더링해 보고 잘 작동하는지 확인해 보세요.

App.js

import Info from './Info'; // 파일 경로 수정

const App = () => {
  return <Info />;
};

export default App;


8.4 useMemo


useMemo를 사용하면 함수 컴포넌트 내부에서 
발생하는 연산을 최적화할 수 있습니다. 

먼저 리스트에 숫자를 추가하면 추가된 숫자들의 평균을 보여 주는 
함수 컴포넌트를 작성해 봅 시다.

src 디렉터리에 Average.js 파일을 생성하세요.

Average.js
import React, { useState } from 'react';

const getAverage = (numbers) => {
  console.log('평균값 계산 중..');
  if (numbers.length === 0) return 0;
  const sum = numbers.reduce((a, b) => a + b, 0); // 초기값 0 추가
  return sum / numbers.length;
};

const Average = () => {
  const [list, setList] = useState([]);
  const [number, setNumber] = useState('');

  const onChange = (e) => {
    setNumber(e.target.value);
  };

  const onInsert = () => {
    const nextList = list.concat(parseInt(number, 10));
    setList(nextList);
    setNumber('');
  };

  return (
    <div>
      <input value={number} onChange={onChange} placeholder="숫자를 입력하세요" />
      <button onClick={onInsert}>추가</button>
      <ul>
        {list.map((value, index) => (
          <li key={index}>{value}</li>
        ))}
      </ul>
      <div>
        <b>평균값:</b> {getAverage(list)}
      </div>
    </div>
  );
};

export default Average;




다음으로는 App에서 이 컴포넌트를 렌더링하세요.
App.js

import Average from './Average'; // 파일 경로 수정

const App = () => {
  return <Average />;
};

export default App;



브라우저에서 숫자들을 등록해 보세요. 평균값이 잘 나타나나요?


그런데 숫자를 등록할 때뿐만 아니라 
인풋 내용이 수정될 때 도 

우리가 만든 getAverage 함수가 호출되는 것을 확인할 수 있습니다. 

인풋 내용이 바뀔 때는 평균값을 다시 계산할 필요가 없는데, 
이렇게 렌더링할 때마다 계산하는 것은 낭비겠지요?

useMemo Hook을 사용하면 이러한 작업을 최적화할 수 있습니다. 
렌더링하는 과정에서 특정 값이 바뀌었을 때만 연산을 실행하고, 
원하는 값이 바뀌지 않았다면 이전에 연산했던 결과를 다시 사용하는 방식입니다.

코드를 다음과 같이 수정해 보세요.

Average.js

import { useState, useMemo } from 'react';

const getAverage = (numbers) => {
  console.log('평균값 계산 중..');
  if (numbers.length === 0) return 0;
  const sum = numbers.reduce((a, b) => a + b, 0); // 초기값 0 추가
  return sum / numbers.length;
};

const Average = () => {
  const [list, setList] = useState([]);
  const [number, setNumber] = useState('');

  const onChange = (e) => {
    setNumber(e.target.value);
  };

  const onInsert = () => {
    const nextList = list.concat(parseInt(number, 10));
    setList(nextList);
    setNumber('');
  };

  const avg = useMemo(() => getAverage(list), [list]);

  return (
    <div>
      <input value={number} onChange={onChange} placeholder="숫자를 입력하세요" />
      <button onClick={onInsert}>추가</button>
      <ul>
        {list.map((value, index) => (
          <li key={index}>{value}</li>
        ))}
      </ul>
      <div>
        <b>평균값:</b> {avg}
      </div>
    </div>
  );
};

export default Average;

useemo를 통한 연산 최적화

이제 List 배열의 내용이 바뀔 때만 
getAverage 함수가 호 출됩니다.


8.5 useCallback

useCalLback은 useMemo와 상당히 비슷한 함수입니다. 

주로 렌더링 성능을 최적화해야 하는 상황에서 사용하는데요, 

이 Hook을 사용하면 만들어 놨던 함수를 재사용할 수 있습니다.

방금 구현한 Average 컴포넌트를 보세요. 
onChange와 onInsert라는 함수를 선언해 주었지요? 

이렇게 선언하면 컴포넌트가 리렌더링될 때마다 
새로 만들어진 함수를 사용하게 됩니다. 

대부분의 경우 이러한 방식은 문제없지만, 
컴포넌트의 렌더링이 자주 발생하거나 렌더링해야 할 
컴포넌트의 개수가 많아지면 이 부분을 최적화해 주는 것이 좋습니다.

그럼 useCalLback을 사용하여 한번 최적화해 봅시다.

Average.js

import { useState, useMemo, useCallback } from 'react';

const getAverage = (numbers) => {
  console.log('평균값 계산 중..');
  if (numbers.length === 0) return 0;
  const sum = numbers.reduce((a, b) => a + b, 0); // 초기값 0 추가
  return sum / numbers.length;
};

const Average = () => {
  const [list, setList] = useState([]);
  const [number, setNumber] = useState('');

  const onChange = useCallback((e) => {
    setNumber(e.target.value);
  }, []); // 컴포넌트가 처음 렌더링될 때만 함수 생성

  const onInsert = useCallback(() => {
    const nextList = list.concat(parseInt(number, 10));
    setList(nextList);
    setNumber('');
  }, [number, list]); // number 또는 list가 바뀌었을 때만 함수 생성

  const avg = useMemo(() => getAverage(list), [list]);

  return (
    <div>
      <input
        value={number}
        onChange={onChange}
        placeholder="숫자를 입력하세요"
      />
      <button onClick={onInsert}>추가</button>
      <ul>
        {list.map((value, index) => (
          <li key={index}>{value}</li>
        ))}
      </ul>
      <div>
        <b>평균값:</b> {avg}
      </div>
    </div>
  );
};

export default Average;



useCallback의 첫 번째 파라미터에는 생성하고 싶은 함수를 넣고, 
두 번째 파라미터에는 배열을 넣으면 됩니다. 
이 배열 에는 어떤 값이 바뀌었을 때 함수를 새로 생성해야 하는지 
명시해야 합니다.

onChange처럼 비어 있는 배열을 넣게 되면 
컴포넌트가 렌더 링될 때 만들었던 함수를 계속해서 재사용하게 되며, 

onInsert처럼 배열 안에 number와 list를 넣게 되면 
인풋 내용이 바뀌거나 새로운 항목이 추가될 때 
새로 만들어진 함수를 사용하게 됩니다.

함수 내부에서 상태 값에 의존해야 할 때는 
그 값을 반드시 두 번째 파라미터 안에 포함시켜 주어야 합니다. 

예를 들어 0nchange의 경우 기존의 값을 조회하지 않고 
바로 설정만 하기 때문에 배열이 비어 있어도 상관없지만, 

onInsert는 기존의 number와 list를 조회해서 
nextList를 생성하기 때문에 
배열 안에 number와 list를 꼭 넣어 주어야 합니다.


_
8.6 useRef
useRef Hook은 함수 컴포넌트에서 ref를 
쉽게 사용할 수 있도록 해 줍니다. 

Average 컴포넌트에서 등록 버튼을 눌렀 을 때 
포커스가 인풋 쪽으로 넘어가도록 코드를 작성해 보겠 습니다.

Average.js

import { useState, useMemo, useCallback, useRef } from 'react';

const getAverage = (numbers) => {
  console.log('평균값 계산 중..');
  if (numbers.length === 0) return 0;
  const sum = numbers.reduce((a, b) => a + b, 0); // 초기값 0 추가
  return sum / numbers.length;
};

const Average = () => {
  const [list, setList] = useState([]);
  const [number, setNumber] = useState('');
  //추가1
  const inputEl = useRef(null);

  const onChange = useCallback((e) => {
    setNumber(e.target.value);
  }, []); // 컴포넌트가 처음 렌더링될 때만 함수 생성

  const onInsert = useCallback(() => {
    const nextList = list.concat(parseInt(number, 10));
    setList(nextList);
    setNumber('');
	//추가2
    inputEl.current.focus(); // 입력창 포커스
  }, [number, list]); // number 혹은 list가 바뀔 때만 함수 생성

  const avg = useMemo(() => getAverage(list), [list]); // list가 변경될 때만 평균값 계산

  return (
    <div>
      <input
        value={number}
        onChange={onChange}
		//추가3
        ref={inputEl}
        placeholder="숫자를 입력하세요"
      />
      <button onClick={onInsert}>추가</button>
      <ul>
        {list.map((value, index) => (
          <li key={index}>{value}</li>
        ))}
      </ul>
      <div>
        <b>평균값:</b> {avg}
      </div>
    </div>
  );
};

export default Average;


useRef를 사용하여 ref를 설정하면 useRef를 통해 
만든 객체 안의 current 값이 실제 엘리먼트를 가리킵니다.



8.6.1 로컬 변수 사용하기 

추가로 컴포넌트 로컬 변수를 사용해야 할 때도 
useRef를 활용할 수 있습니다. 

여기서 로컬 변수란 렌더링과 상관없이 
바뀔 수 있는 값을 의미합니다. 

클래스 형태로 작성된 컴포넌트의 경우에는 
로컬 변수를 사용해야 할 때 다음과 같이 작성할 수 있죠.

예시 코드

import React, { Component } from 'react';

class MyComponent extends Component {
    id = 1;

    setId = (n) => {
        this.id = n;
    };

    printId = () => {
        console.log(this.id);
    };

    render() {
        return <div>MyComponent</div>;
    }
}

export default MyComponent;


이러한 코드를 함수 컴포넌트로 작성한다면? 
다음과 같이 할 수 있습니다.
예시 코드

import React, { useRef } from 'react';

const RefSample = () => {
    const id = useRef(1);

    const setId = (n) => {
        id.current = n;
    };

    const printId = () => {
        console.log(id.current);
    };

    return (
        <div>
            RefSample
        </div>
    );
};

export default RefSample;



이렇게 ref 안의 값이 바뀌어도 컴포넌트가 
렌더링되지 않는다는 점에는 주의해야 합니다. 

렌더링과 관련되지 않은 값을 관리할 때만 이러한 방식으로 코드를 작성하세요.



8.7 커스텀 Hooks 만들기


여러 컴포넌트에서 비슷한 기능을 공유할 경우, 
이를 여러분 만의 Hook으로 작성하여 로직을 재사용할 수 있습니다.

기존에 Info 컴포넌트에서 여러 개의 인풋을 관리하기 위해
useReducer로 작성했던 로직을 

useInputs라는 Hook으로 따로 분리해 보겠습니다.

srC 디렉터리에 uselnputs.js 파일을 만들고 
다음 코드를 작 성해 보세요.

uselnputs.js

import { useReducer } from 'react';

function reducer(state, action) {
    return {
        ...state,
        [action.name]: action.value,
    };
}

export default function useInputs(initialForm) {
    const [state, dispatch] = useReducer(reducer, initialForm);

    const onChange = (e) => {
	// useReducer에서 제공하는 함수 dispatch
	// reducer 함수에 action 에 e.target 호출함. 
        dispatch(e.target);
    };

    return [state, onChange];
}


이 Hook을 Info 컴포넌트에서 사용해 보겠습니다!
Info.js

import useInputs from './useInputs';

const Info = () => {
    const [state, onChange] = useInputs({
        name: '',
        nickname: '',
    });

    const { name, nickname } = state;

    return (
        <div>
            <div>
                <input name="name" value={name} onChange={onChange} />
                <input name="nickname" value={nickname} onChange={onChange} />
            </div>
            <div>
                <div>
                    <b>이름:</b> {name}
                </div>
                <div>
                    <b>닉네임:</b> {nickname}
                </div>
            </div>
        </div>
    );
};

export default Info;


어떤가요? 훨씬 깔끔해졌죠?

8.8 다른 Hooks
이번에 커스텀 Hooks를 만들어서 사용했던 것처럼, 
다른 개발자가 만든 Hooks도 라이브러리로 설치하여 사용할 수 있 습니다.

다른 개발자가 만든 다양한 Hooks 리스트는 다음 링크에서 확인할 수 있습니다.

  https://nikgraf.github.io/react-hooks/
  https://github.com/rehooks/awesome-react-hooks

8.9 정리
리액트에서 Hooks 패턴을 사용하면 
클래스형 컴포넌트를 작성하지 않고도 대부분의 기능을 구현할 수 있습니다. 

이러한 기능이 리액트에 릴리즈되었다고 해서 
기존의 setState 를 사용하는 방식이 잘못된 것은 아닙니다. 

물론 usestate 혹은 useReducer를 통해 구현할 수 있더라도 말이죠.
리액트 매뉴얼에 따르면, 
기존의 클래스형 컴포넌트는 앞으로도 계속해서 지원될 예정입니다. 
그렇기 때문에 만약 유지 보수하고 있는 프로젝트에서 
클래스형 컴포넌트를 사용하고 있다면, 
이를 굳이 함수 컴포넌트와 Hooks를 사용하는 
형태로 전환할 필요는 없습니다. 

다만, 매뉴얼에서는 새로 작성하는 
컴포넌트의 경우 함수 컴포넌트와 Hooks를 
사용할 것을 권장하고 있습니다. 

앞으로 여러분이 프로젝트를 개발할 때는 
함수 컴포넌트의 사용을 첫 번째 옵션으로 두고, 
꼭 필요 한 상황에서만 클래스형 컴포넌트를 구현하세요.


=================================================================
실습 1-3

Average.js

import { useState, useMemo, useCallback, useRef } from 'react';

const getAverage = (numbers) => {
  console.log('평균값 계산 중..');
  if (numbers.length === 0) return 0;
  const sum = numbers.reduce((a, b) => a + b, 0); // 초기값 0 추가
  return sum / numbers.length;
};

const Average = () => {
  const [list, setList] = useState([]);
  const [number, setNumber] = useState('');
  //추가1
  const inputEl = useRef(null);

  const onChange = useCallback((e) => {
    setNumber(e.target.value);
  }, []); // 컴포넌트가 처음 렌더링될 때만 함수 생성

  const onInsert = useCallback(() => {
    const nextList = list.concat(parseInt(number, 10));
    setList(nextList);
    setNumber('');
	//추가2
    inputEl.current.focus(); // 입력창 포커스
  }, [number, list]); // number 혹은 list가 바뀔 때만 함수 생성

  const avg = useMemo(() => getAverage(list), [list]); // list가 변경될 때만 평균값 계산

  return (
    <div>
      <input
        value={number}
        onChange={onChange}
		//추가3
        ref={inputEl}
        placeholder="숫자를 입력하세요"
      />
      <button onClick={onInsert}>추가</button>
      <ul>
        {list.map((value, index) => (
          <li key={index}>{value}</li>
        ))}
      </ul>
      <div>
        <b>평균값:</b> {avg}
      </div>
    </div>
  );
};

export default Average;


위의 코드를 참고하여 

실습 예제 1: 숫자 입력 제한
문제:
입력창에 숫자가 아닌 값(예: 문자)이 입력되지 않도록 
제한하려면 코드를 어떻게 수정해야 하나요?


실습 예제 2: 평균값 계산 최적화 확인
문제:
getAverage 함수가 실제로 호출되는 경우를 확인하려면 어떻게 해야 하나요?
그리고 useMemo를 제거하면 어떤 결과가 발생하나요?


실습 예제 3: 입력값 초기화 조건 추가
문제:
숫자가 0 이하인 값을 입력한 경우 
추가 버튼을 클릭해도 리스트에 추가되지 않도록 
제한하려면 어떻게 수정해야 하나요?




실습 예제 1: 숫자 입력 제한
문제:
입력창에 숫자가 아닌 값(예: 문자)이 입력되지 않도록 
제한하려면 코드를 어떻게 수정해야 하나요?

해답: onChange 함수에서 입력값이 숫자인지 확인하고, 
숫자가 아닌 경우 상태를 업데이트하지 않도록 수정합니다.

수정된 onChange 함수:

javascript
복사
편집

const onChange = useCallback((e) => {
  const value = e.target.value;
  if (!isNaN(value) && value.trim() !== "") { // 숫자인 경우만 업데이트
    setNumber(value);
  }
}, []);


const onInsert = useCallback(() => {
//추가1
    const parsedNumber = parseInt(number, 10);
    if (isNaN(parsedNumber)) {
      // 입력값이 NaN일 경우 처리
      setNumber(""); // 입력값 초기화
      inputEl.current.focus();
      return;
    }
	
    const nextList = list.concat(parsedNumber);
    setList(nextList);
    setNumber("");
    //추가2
    inputEl.current.focus(); // 입력창 포커스
  }, [number, list]); // number 혹은 list가 바뀔 때만 함수 생성

실습 예제 2: 평균값 계산 최적화 확인
문제:
getAverage 함수가 실제로 호출되는 경우를 확인하려면 어떻게 해야 하나요?
그리고 useMemo를 제거하면 어떤 결과가 발생하나요?

해답:

현재 getAverage 함수는 
console.log('평균값 계산 중..');로 호출 여부를 확인할 수 있습니다.

useMemo 덕분에 list가 변경될 때만 호출됩니다.

useMemo 제거 시 결과:

getAverage 함수는 매번 렌더링될 때 호출됩니다.

입력값을 변경하거나 버튼을 클릭할 때도 
불필요하게 평균값 계산이 실행되어 성능이 저하될 수 있습니다.


실습 예제 3: 입력값 초기화 조건 추가
문제:
숫자가 0 이하인 값을 입력한 경우 
추가 버튼을 클릭해도 리스트에 추가되지 않도록 
제한하려면 어떻게 수정해야 하나요?


해답: onInsert 함수에서 숫자가 0 이하인지 확인한 후, 
조건에 맞지 않으면 리스트를 업데이트하지 않습니다.

수정된 onInsert 함수:

javascript
복사
편집
const onInsert = useCallback(() => {
  const parsedNumber = parseInt(number, 10);
  if (parsedNumber <= 0) { // 0 이하의 값은 추가하지 않음
    setNumber('');
    inputEl.current.focus();
    return;
  }
  const nextList = list.concat(parsedNumber);
  setList(nextList);
  setNumber('');
  inputEl.current.focus(); // 입력창 포커스
}, [number, list]);

전체 요약
예제 1: 숫자가 아닌 값이 입력되지 않도록 onChange에서 
숫자 여부를 확인했습니다.

예제 2: useMemo로 getAverage 호출을 최적화했으며, 
이를 제거하면 매번 렌더링 시 불필요한 호출이 발생합니다.

예제 3: 0 이하의 값을 입력한 경우 
리스트에 추가되지 않도록 onInsert에 조건을 추가했습니다.

Q1: 평균값 계산을 더욱 최적화하려면 어떤 기법을 사용할 수 있을까요?
Q2: 입력값이 너무 클 경우(예: 1,000 이상) 경고 메시지를 출력하려면 어떻게 구현할 수 있을까요?
Q3: 입력값에 소수점 숫자를 허용하도록 코드를 수정하려면 어떤 부분을 변경해야 할까요?
