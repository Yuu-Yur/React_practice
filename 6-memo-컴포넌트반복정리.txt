6컴포넌트 반복
6.1 자바스크립트 배열의 map() 함수
6.2 데이터 배열을 컴포넌트 배열로 변환하기
6.3 key
6.4 응용
6.5 정리


웹 애플리케이션을 만들다 보면 다음과 같이 
반복되는 코드를 작성할 때가 있습니다. 

src 디렉터리에 IterationSample.js라는 파일을 
작성해서 다음 코드를 따라 한번 적어 보세요

IterationSample.js

import React from 'react';

const IterationSample = () => {
  return (
    <ul>
      <li>눈사람</li>
      <li>얼음</li>
      <li>눈</li>
      <li>바람</li>
    </ul>
  );
};

export default IterationSample;


코드에서 다음 형태가 계속 반복되는 것을 볼 수 있습니다.
〈LI>..</Li>
지금은 1i 태그 하나뿐이라 그렇게 문제가 되지는 않을 것 같습니다. 
하지만 코드가 좀 더 복잡하다면 어떨까요? 

코드 양은 더더욱 늘어날 것이며, 파일 용량도 쓸데없이 증가하겠죠. 
이는 낭비입니다. 
또 보여 주어야 할 데이터가 유동적이라면 
이런 코드로는 절대로 관리하지 못합니다.

이 장에서는 리액트 프로젝트에서 반복적인 
내용을 효율적으로 보여주고 관리하는 방법을 알아보겠습니다.


6.1 자바스크립트 배열의 map0 함수

자바스크립트 배열 객체의 내장 함수인 map 함수를 
사용하여 반복되는 컴포넌트를 렌더링할 수 있습니다. 
map 함수는 파라미터로 전달된 함수를 사용해서 
배열 내 각 요소를 원하는 규칙에 따라 변환한 후 
그 결과로 새로운 배열을 생성합니다.

6.1.1 문법
arr.map(callback, [thisArg])
이 함수의 파라미터는 다음과 같습니다.
  calLback: 새로운 배열의 요소를 생성하는 
  함수로 파 라미터는 다음 세 가지입니다.
  
  currentValue: 현재 처리하고 있는 요소
  index: 현재 처리하고 있는 요소의 index 값
  array: 현재 처리하고 있는 원본 배열
  thisArg(선택 항목): calLback 함수 내부에서 사용할this 레퍼런스
  
6.1.2 예제
map 함수를 사용하여 배열 [1, 2, 3, 4, 5]의 
각 요소를 제곱 해서 새로운 배열을 생성하겠습니다.

var numbers = [1, 2, 3, 4, 5];
var processed = numbers.map(function (num){
return num * num;
3);
console. log (processed);

크롬 개발자 도구(F12)를 열어 이 코드를 콘솔에 입력해 보
세요.
노트] 콘솔에서 새 줄 작성하기
콘솔에서 Shift)를 누른 채 Enter를 누르면 명령어가 바로 실행되지 
않고 새 줄을 들여 쓸 수 있습니다.

> var numbers = [1, 2, 3, 4, 5];
var processed = numbers.map(function(num){
return num*num;
});
console.log(processed);


이처럼 map 함수는 기존 배열로 
새로운 배열을 만드는 역할 을 합니다. 
이 코드를 ESG 문법으로 작성해 볼까요?

const numbers = [1, 2, 3, 4, 5];
const result = numbers.map(num = num * num);
console. log (result);

var 키워드 대신 Const를 사용했고, 
function(•••){•••} 대신 화살표 함수를 사용했습니다.


6.2 데이터 배열을 컴포넌트 배열로 변환하기

6. 1절에서는 기존 배열에 있는 값들을 제곱하여 
새로운 배열 을 생성했습니다. 
똑같은 원리로 기존 배열로 컴포넌트로 구성된 배열을 생성할 수도 있답니다.

6.2.1 컴포넌트 수정하기

조금 전에 만들었던 IterationSample 
컴포넌트를 다음과 같이 수정해 보세요.

IterationSample.js

import React from 'react';

const IterationSample = () => {
  const names = ['눈사람', '얼음', '눈', '바람'];
  const nameList = names.map((name, index) => <li key={index}>{name}</li>);

  return <ul>{nameList}</ul>;
};

export default IterationSample;


문자열로 구성된 배열을 선언합니다. 
그 배열 값을 사용하여 <li>..</Li> JSX 코드로 된 배열을 
새로 생성한 후 nameList에 담습니다.

map 함수에서 JSX를 작성할 때는 앞서 다른 예제처럼 DOM
요소를 작성해도 되고, 컴포넌트를 사용해도 됩니다.


6.2.2 App 컴포넌트에서 예제 컴포넌트 렌더링

App 컴포넌트에서 기존 코드를 지우고, 
IterationSample 컴포넌트를 불러와 렌더링하세요.

App.js

import React, { Component } from 'react';
import IterationSample from './IterationSample';

class App extends Component {
  render() {
    return (
      <div>
        <IterationSample />
      </div>
    );
  }
}

export default App;


코드를 저장하고, 웹 브라우저를 체크해 볼까요?

원하는대로 렌더링이 되었습니다. 
하지만 아직 완벽하지는 않습니다. 
크롬 개발자 도구의 콘솔을 한번 열어 보세요.


"key" prop이 없다는 경고 메시지를 표시했습니다. key란 무엇일까요?


6.3 key

리액트에서 key는 컴포넌트 배열을 렌더링했을 때 
어떤 원소에 변동이 있었는지 알아내려고 사용합니다. 
예를 들어 
유동적인 데이터를 다룰 때는 원소를 새로 생성할 수도, 
제거할 수도, 수정할 수도 있죠. 

Key가 없을 때는 VirtualDOM을 비교하는 과정에서 
리스트를 순차적으로 비교하면서 변화를 감지합니다. 
하지만 key가 있다면 이 값을 사용하여 
어떤 변화가 일어났는지 더욱 빠르게 알아낼 수 있습니다.

6.3.1 key 설정
key 값을 설정할 때는 map 함수의 인자로 전달되는 
함수 내부에서 컴포넌트 props를 설정하듯이 설정하면 됩니다. 
key 값은 언제나 유일해야 합니다. 

따라서 데이터가 가진 고윳값을 key 값으로 설정해야 합니다.

예를 들어 
다음과 같이 게시판의 게시물을 렌더링한다면 
게시물 번호를 key 값으로 설정해야 합니다.
const articleList = articles.map(article => (
<Article
title={article.title} writer={article.writer} key={article.id}
/>
));

하지만 앞서 만들었던 예제 컴포넌트에는 
이런 고유 번호가 없습니다. 
이때는 map 함수에 전달되는 콜백 함수의 인수인
index 값을 사용하면 됩니다.

예제 컴포넌트를 다음과 같이 수정해 보세요.

IterationSample.js

import React from 'react';

const IterationSample = () => {
  const names = ['눈사람', '얼음', '눈', '바람'];
  const namesList = names.map((name, index) => <li key={index}>{name}</li>);

  return <ul>{namesList}</ul>;
};

export default IterationSample;


이제 개발자 도구에서 더 이상 경고 메시지를 표시하지 않습니다. 
확인해 보세요. 고유한 값이 없을 때만 index 값을 key로 사용해야 합니다. 
index를 key로 사용하면 배열이 변경될 때 효율적으로 리렌더링하지 못합니다.

6.4 응용
지금까지 배운 개념을 응용하여 고정된 배열을 
렌더링하는 것이 아닌, 
동적인 배열을 렌더링하는 것을 구현해 보겠습니다. 
그리고 index 값을 key로 사용하면 
리렌더링이 비효율적 이라고 배웠는데, 
이러한 상황에 어떻게 고윳값을 만들 수 있는지도 알아보겠습니다. 
이 절의 실습 흐름은 다음과 같습니다.

초기 상태 설정하기
데이터 추가 기능 구현하기
데이터 제거 기능 구현하기

여기서부터

6.4.1 초기 상태 설정하기

IterationSample 컴포넌트에서 usestate를 사용하여 
상태 를 설정하겠습니다. 

세 가지 상태를 사용할 텐데 하나는 데이터 배열이고, 
다른 하나는 텍스트를 입력할 수 있는 input의 상태입니다. 

그럼 마지막 하나는 무엇일까요? 그것은 데이터 배열에서 
새로운 항목을 추가할 때 사용할 고유 id를 위한 상태입니다.

배열을 설정할 때, 조금 전에는 
단순히 문자열로 이루어진 배열을 만들었지만, 
이번에는 객체 형태로 이루어진 배열을 만들겠습니다. 

해당 객체에는 문자열과 고유 id 값이 있습니다

IterationSample 컴포넌트를 다음과 같이 수정해 보세요.

IterationSample.js

import React, { useState } from 'react';

const IterationSample = () => {
  const [names, setNames] = useState([
    { id: 1, text: '눈사람' },
    { id: 2, text: '얼음' },
    { id: 3, text: '눈' },
    { id: 4, text: '바람' },
  ]);
  const [inputText, setInputText] = useState('');
  const [nextId, setNextId] = useState(5); // 새로운 항목을 추가할 때 사용할 id

  const namesList = names.map((name) => <li key={name.id}>{name.text}</li>);

  return (
    <div>
      <input
        value={inputText}
        onChange={(e) => setInputText(e.target.value)}
        placeholder="새 항목 입력"
      />
      <button
        onClick={() => {
          const newNames = names.concat({ id: nextId, text: inputText });
          setNames(newNames);
          setNextId(nextId + 1);
          setInputText('');
        }}
      >
        추가
      </button>
      <ul>{namesList}</ul>
    </div>
  );
};

export default IterationSample;



이번에는 map 함수를 사용할 때 
key 값을 index 대신 name.id 값으로 지정해 주었습니다.

코드를 저장하고, 브라우저에서 이전과 같은 결과가 나타나 는지 확인하세요.


6.4.2 데이터 추가 기능 구현하기 

이제 새로운 이름을 등록할 수 있는 기능을 구현해 봅시다.

우선 ul 태그의 상단에 input과 button을 렌더링하고, 
input의 상태를 관리해 보세요.

IterationSample.js

import React, { useState } from 'react';

const IterationSample = () => {
  const [names, setNames] = useState([
    { id: 1, text: '눈사람' },
    { id: 2, text: '얼음' },
    { id: 3, text: '눈' },
    { id: 4, text: '바람' },
  ]);
  const [inputText, setInputText] = useState('');
  const [nextId, setNextId] = useState(5); // 새로운 항목을 추가할 때 사용할 id

  const onChange = (e) => setInputText(e.target.value);

  const onClick = () => {
    const nextNames = names.concat({
      id: nextId,
      text: inputText,
    });
    setNames(nextNames);
    setNextId(nextId + 1);
    setInputText('');
  };

  const namesList = names.map((name) => <li key={name.id}>{name.text}</li>);

  return (
    <>
      <input value={inputText} onChange={onChange} placeholder="새 항목 입력" />
      <button onClick={onClick}>추가</button>
      <ul>{namesList}</ul>
    </>
  );
};

export default IterationSample;


그다음에는 버튼을 클릭했을 때 
호출할 onClick 함수를 선언하여 버튼의 onClick 이벤트로 설정해 보세요.


onClick 함수에서는 배열의 내장 함수 concat을 사용하여 
새로운 항목을 추가한 배열을 만들고, 
SetNames를 통해 상태를 업데이트해 줍니다.

IterationSample.js

import React, { useState } from 'react';

const IterationSample = () => {
  const [names, setNames] = useState([]); // 초기 names 배열 설정
  const [inputText, setInputText] = useState('');
  const [nextId, setNextId] = useState(1); // 초기 ID 값을 1로 설정

  const onChange = (e) => setInputText(e.target.value);

  const onClick = () => {
    const nextNames = names.concat({
      id: nextId, // nextId 값을 id로 설정
      text: inputText, // 입력된 텍스트를 설정
    });
    setNextId(nextId + 1); // nextId 값을 1 증가
    setNames(nextNames); // names 배열 업데이트
    setInputText(''); // inputText 초기화
  };

  const namesList = names.map((name) => <li key={name.id}>{name.text}</li>);

  return (
    <>
      <input value={inputText} onChange={onChange} placeholder="항목을 입력하세요" />
      <button onClick={onClick}>추가</button>
      <ul>{namesList}</ul>
    </>
  );
};

export default IterationSample;


배열에 새 항목을 추가할 때 
배열의 push 함수를 사용하지 않고 concat을 사용했는데요. 

push 함수는 기존 배열 자체를 변경해 주는 
반면, concat은 새로운 배열을 만들어 준다는 차이점이 있습니다.

리액트에서 상태를 업데이트할 때는 
기존 상태를 그대로 두면서 새로운 값을 상태로 설정해야 합니다. 

이를 불변성 유지라고 하는데요, 
불변성 유지를 해주어야 
나중에 리액트 컴포넌트의 성능을 최적화 할 수 있습니다. 
이에 대한 자세한 내용은 추후 알아보겠습니다.

onClick 함수에서 새로운 항목을 추가할 때 
객체의 id 값은 nextId를 사용하도록 하고, 
클릭될 때마다 값이 1씩 올라가도록 구현했습니다. 

추가로 button이 클릭될 때 기존의 input 내용을 
비우는 것도 구현해 주었습니다.
코드를 다 작성했다면 파일을 저장하고 
브라우저를 열어서 새로운 항목을 추가해 보세요.


6.4.3 데이터 제거 기능 구현하기 

이번에는 각 항목을 더블클릭했을 때 
해당 항목이 화면에서 사라지는 기능을 구현해 보겠습니다. 
이번에도 마찬가지로 불변성을 유지하면서 
업데이트해 주어야 합니다. 

불변성을 유지하면서 배열의 특정 항목을 지울 때는 배열의 내장 함수
filter를 사용합니다.

filter 함수를 사용하면 배열에서 특정 조건을 
만족하는 원소들만 쉽게 분류할 수 있습니다. 
사용 예시를 한번 확인해 볼까요?

const numbers = [1, 2, 3, 4, 5, 6];
const biggerThanThree = numbers.filter(number = number >3);
// 결과: [4, 5, 6]

filter 함수의 인자에 분류하고 싶은 조건을 
반환하는 함수를 넣어 주면 쉽게 분류할 수 있습니다.

이 filter 함수를 응용하여 특정 배열에서 
특정 원소만 제외 시킬 수도 있습니다. 

예를 들어 위 코드에서 본 numbers 배열에서 
3만 없애고 싶다면 다음과 같이 하면 됩니다.

const numbers = [1, 2, 3, 4, 5, 6];
const withoutThree = numbers.filter(number => number !==3);
// 결과: [1, 2, 4, 5, 6]

이제 filter 함수를 사용하여 IterationSample 
컴포넌트의 항목 제거 기능을 구현해 봅시다. 
onDoubleClick
HTML 요소를 더블클릭할 때 사용하는 
이벤트 이름은 onDoubleClick 입니다. 
onRemove라는 함수를 만들어서 
각 1i 요소에 이벤트 등록을 해주세요.

IterationSample.js

import React, { useState } from 'react';

const IterationSample = () => {
  const [names, setNames] = useState([
    { id: 1, text: '눈사람' },
    { id: 2, text: '얼음' },
    { id: 3, text: '눈' },
    { id: 4, text: '바람' },
  ]);
  const [inputText, setInputText] = useState('');
  const [nextId, setNextId] = useState(5); // 새로운 항목을 추가할 때 사용할 ID

  const onChange = (e) => setInputText(e.target.value);

  const onClick = () => {
    const nextNames = names.concat({
      id: nextId, // nextId 값을 id로 설정
      text: inputText,
    });
    setNextId(nextId + 1); // nextId 값을 1 증가
    setNames(nextNames); // names 값을 업데이트
    setInputText(''); // inputText를 비운다
  };

  const onRemove = (id) => {
    const nextNames = names.filter((name) => name.id !== id);
    setNames(nextNames);
  };

  const namesList = names.map((name) => (
    <li key={name.id} onDoubleClick={() => onRemove(name.id)}>
      {name.text}
    </li>
  ));

  return (
    <>
      <input value={inputText} onChange={onChange} placeholder="항목을 입력하세요" />
      <button onClick={onClick}>추가</button>
      <ul>{namesList}</ul>
    </>
  );
};

export default IterationSample;



코드를 저장하고 브라우저에서 항목을 더블클릭하여 
제거해 보세요. 잘 지워지나요?


6.5 정리
이 장에서는 반복되는 데이터를 렌더링하는 방법을 배우고, 
이를 응용하여 유동적인 배열을 다루어 보았습니다. 

컴포넌트 배열을 렌더링할 때는 key 값 설정에 항상 주의해야 합니다. 
또 key 값은 언제나 유일해야 합니다. 

Key 값이 중복된다면 렌더링 과정에서 오류가 발생합니다.
상태 안에서 배열을 변형할 때는 배열에 
직접 접근하여 수정 하는 것이 아니라 
concat, filter 등의 배열 내장 함수를 
사용하여 새로운 배열을 만든 후 
이를 새로운 상태로 설정해 주어야 한다는 점을 명심하세요. 

다양한 배열 및 객체 업데이트 
방법들을 계속 배워 나갈 것입니다.