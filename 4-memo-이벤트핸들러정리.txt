
4장이벤트 핸들링
4.1 리액트의 이벤트 시스템
4.2 예제로 이벤트 핸들링 익히기
4.3 함수 컴포넌트로 구현해 보기
4.4 정리

사용자가 웹 브라우저에서 DOM 요소들과 상호 작용하는 것 을 
이벤트(event)라고 합니다. 
예를 들어 버튼에 마우스 커서 를 올렸을 때는 
onmouseover 이벤트를 실행하고, 
클릭했을 때는 onClick 이벤트를 실행합니다. 
Form 요소는 값이 바뀔 때 onChange 이벤트를 실행하죠. 

HTML을 사용한 적이 있다 면 매우 익숙할 것입니다. 
HTML에서 DOM 요소에 이벤트 를 설정하는 방법을 한번 살펴볼까요?

다음 코드를 HTML 파일로 저장하여
(프로젝트 디렉터리 외 부에 저장하세요) 
웹 브라우저로 열어 보거나,
JSBin(https://jsbin.com/)에서 
코드를 입력하여 테스트해 보세요. 
 
test.html
<!DOCTYPE html>
〈html》
<head>
〈meta charset="utf-8">
‹meta name="viewport" content="width=device-width">
‹title>JS Bin</title>
</head>
<body>
‹button onclick="alert('executed') ">
Click Me </button>
</body>
〈/html》

코드를 입력하고 HTML이 웹 브라우저에서 
렌더링되면 버튼이 나타날 것입니다. 
Click Me 버튼을 눌러 보세요.

버튼을 누르면 aLert 함수를 사용하여 메시지 박스를 띄우도
록 했습니다. 
HTML에서는 이처럼 이벤트를 실행하면 "" 사이에 
있는 자바스크립트를 실행하도록 코드를 작성합니다.

리액트에서 이벤트를 다룰 때는 이와 비슷하면서도 좀 다릅니다. 
한번 알아볼까요?



4.1 리액트의 이벤트 시스템
리액트의 이벤트 시스템은 웹 브라우저의 
HTML 이벤트와 인터페이스가 동일하기 때문에 
사용법이 꽤 비슷합니다. 

3장 에서 작성한 버튼 코드를 다시 한 번 살펴봅시다.

Say.js
import React, { useState } from 'react';

const Say = () => {
  const [message, setMessage] = useState('');
  const [color, setColor] = useState('black');

  const onClickEnter = () => setMessage('안녕하세요!');
  const onClickLeave = () => setMessage('안녕히 가세요!');

  return (
    <div>
      <button onClick={onClickEnter}>입장</button>
      <button onClick={onClickLeave}>퇴장</button>
      <h1 style={{ color }}>{message}</h1>
      <button onClick={() => setColor('red')}>빨간색</button>
      <button onClick={() => setColor('blue')}>파란색</button>
      <button onClick={() => setColor('green')}>초록색</button>
    </div>
  );
};

export default Say;

사용법은 일반 HTML에서 이벤트를 작성하는 것과 비슷한데, 
주의해야 할 몇 가지 사항이 있습니다.

4.1.1 이벤트를 사용할 때 주의 사항

   이벤트 이름은 카멜 표기법으로 작성합니다 
   예를 들어 HTML의 oncLick은 리액트에서는 
   onClick으 로 작성해야 합니다. 
   또 onkeyup은 onKeyUp으로 작성합니다.
   
   이벤트에 실행할 자바스크립트 코드를 전달하는 것이 아니라, 
   함수 형태의 값을 전달합니다 
   HTML에서 이벤트를 설정할 때는 큰따옴표 안에 
   실행할 코드를 넣었지만, 
   
   리액트에서는 함수 형태의 객체를 전달 합니다. 
   앞서 버튼 예제에서도 화살표 함수 문법으로 함수를 만들어 전달했지요? 
   이렇게 바로 만들어서 전달해도 되고, 
   렌더링 부분 외부에 미리 만들어서 전달해도 됩니다 . 
   
   이것은 추후 직접 실습해 보겠습니다.
   DOM 요소에만 이벤트를 설정할 수 있습니다 
   즉 dIV, button, Input, form, span 등의 
   DOM 요소에는 이벤트를 설정할 수 있지만, 
   우리가 직접 만든 컴포넌트에는 
   이벤트를 자체적으로 설정할 수 없습니다.
   
   예를 들어 다음과 같이 MyComponent에 
   oncLick 값을 설정한다면 MyComponent를 클릭할 때 
   doSomething 함수를 실행하는 것이 아니라, 
   
   그냥 이름이 onCLick인 props를 MyComponent에게 
   전달해 줄 뿐입니다.
   <MyComponent onClick={doSomething}/>
   따라서 컴포넌트에 자체적으로 이벤트를 설정할 수는 없습니다. 
   
   하지만 전달받은 props를 컴포넌트 내부의 DOM이벤트로 
   설정할 수는 있죠.<div onClick={this.props.onClick}>


4.1.2 이벤트 종류
리액트에서 지원하는 이벤트 종류는 다음과 같습니다.
  Clipboard
  Composition
  Keyboard
  Focus
  Form
  Mouse
  Selection
  Touch
  UI
  Wheel
  Media
  Image
  Animation
  Transition
  
참 많죠? 책에서는 이 이벤트를 전부 다루지는 않습니다. 
흔히 사용하는 간단한 이벤트만 4장에서 다룰 것입니다. 
나머지 이벤트는 
리액트 매뉴얼(https://facebook.github.io/r eact/docs/events.html)을
참고합니다.

4.2 예제로 이벤트 핸들링 익히기
그럼 예제로 이벤트 핸들링을 익혀 보겠습니다. 
앞으로 실습 할 각 단계는 다음과 같습니다.


4.2.1 컴포넌트 생성 및 불러오기

4.2.1.1 컴포넌트 생성

실습을 시작하기에 앞서 새 컴포넌트를 만들어 보겠습니다.

src 디렉터리 내부에 
EventPractice.js 파일을 만드세요. 
만든 후에는 컴포넌트 초기 코드를 작성하세요.

먼저 클래스형 컴포넌트로 작성하여 기능을 구현해 보겠습니다. 
물론 나중에 함수 컴포넌트로도 구현해 볼 것입니다.
EventPractice.js

import React, { Component } from 'react';

class EventPractice extends Component {
  render() {
    return (
      <div>
        <h1>이벤트 연습</h1>
      </div>
    );
  }
}

export default EventPractice;



App 컴포넌트에서 EventPractice를 불러와 렌더링하세요.

import EventPractice from './EventPractice';
const App = () => {
return <EventPractice />;
}
export detauLt App;

이제 웹 브라우저를 확인해 보면 다음과 같이 
이벤트 연습이 렌더링된 화면을 볼 수 있습니다.



4.2.2 onChange 이벤트 핸들링하기

4.2.2.1 onChange 이벤트 설정

EventPractice 컴포넌트에 input 요소를 렌더링하는 
코드 와 해당 요소에 onChange 이벤트를 설정하는 코드를 작성합니다. 

다음 코드를 Eventpractice 컴포넌트의 render 메서드에 작성하세요.

EventPractice.js

import React, { Component } from 'react';

class EventPractice extends Component {
  render() {
    return (
      <div>
        <h1>이벤트 연습</h1>
        <input
          type="text"
          name="message"
          placeholder="아무거나 입력해 보세요"
          onChange={(e) => {
            console.log(e);
          }}
        />
      </div>
    );
  }
}

export default EventPractice;

코드를 저장하고, 웹 브라우저에서 크롬 개발자 도구(F12)
를 열어 인풋에 아무것이나 입력해 보세요.


이벤트 객체가 콘솔에 나타났습니다.

EventPractice.js의 onChange 설정 부분 다시 보기
onChange={
(e) => {
console. log(e);
｝
}

여기서 콘솔에 기록되는 e 객체는 
SyntheticEvent로 웹 브라우저의 네이티브 이벤트를 감싸는 객체입니다. 
네이티브 이벤트와 인터페이스가 같으므로 
순수 자바스크립트에서 HTML 이벤트를 다룰 때와 
똑같이 사용하면 됩니다.
SyntheticEvent는 네이티브 이벤트와 달리 
이벤트가 끝나고 나면 이벤트가 초기화되므로 
정보를 참조할 수 없습니다.

예를 들어, 0.5초 뒤에 e 객체를 참조하면 
e 객체 내부의 모든 값이 비워지게 됩니다

만약 비동기적으로 이벤트 객체를 참조할 일이 있다면
e.persist() 함수를 호출해 주어야 합니다.

예를 들어 onChange 이벤트가 발생할 때, 
앞으로 변할 인풋 값인 e.target.value를 콘솔에 기록해 보겠습니다.

코드를 다음과 같이 수정해 보세요.

EventPractice.js의 onChange 코드 수정

onChange={
(e) => {
console.log(e.target.value);
}
}

값이 바뀔 때마다 바뀌는 값을 콘솔에 기록하지요?


4.2.2. 2 state에 input 값 담기

이번에는 3장에서 배운 State에 input 값을 담아 보겠습니다.

3장에서 배운 대로 생성자 메서드인 constructor에서 
state 초깃값을 설정하고, 
이벤트 핸들링 함수 내부에서 this.setState 메서드를 호출하여 
state를 업데이트해 봅시다.

그다음에는 input의 value 값을 State에 있는 값으로 설정 하세요.

EventPractice.js

import React, { Component } from 'react';

class EventPractice extends Component {
  state = {
    message: ''
  };

  render() {
    return (
      <div>
        <h1>이벤트 연습</h1>
        <input
          type="text"
          name="message"
          placeholder="아무거나 입력해 보세요"
          value={this.state.message}
          onChange={(e) => {
            this.setState({
              message: e.target.value
            });
          }}
        />
      </div>
    );
  }
}

export default EventPractice;

코드를 저장하고, 인풋에 아무것이나 입력해 보세요. 
오류를 발생시키지 않고 제대로 입력할 수 있다면 
state에 텍스트를 잘 담은 것입니다.

4.2.2.3 버튼을 누를 때 comment 값을 공백으로 설정

정말로 우리가 입력한 값이 State에 잘 들어갔는지, 
그리고 인풋에서 그 값을 제대로 반영하는지 한번 검증해 보겠습니다. 
input 요소 코드 아래쪽에 button을 하나 만들고, 
클릭 이벤트가 발생하면 
현재 comment 값을 메시지 박스로 띄운 후 
Comment 값을 공백으로 설정하겠습니다.

EventPractice.js

import React, { Component } from 'react';

class EventPractice extends Component {
  state = {
    message: ""
  };

  render() {
    return (
      <div>
        <h1>이벤트 연습</h1>
        <input
          type="text"
          name="message"
          placeholder="아무거나 입력해 보세요"
          value={this.state.message}
          onChange={(e) => {
            this.setState({ message: e.target.value });
          }}
        />
        <button
          onClick={() => {
            alert(this.state.message);
            this.setState({ message: "" });
          }}
        >
          확인
        </button>
      </div>
    );
  }
}

export default EventPractice;

alert를 사용하여 현재 message 값을 화면에 표시하게 했습니다.

4.2.3 임의 메서드 만들기

4.1.1절의 주의 사항에서 "이벤트에 실행할 자바스크립트코드를 
전달하는 것이 아니라, 함수 형태의 값을 전달합니다"라고 배
웠습니다. 그렇기에 이벤트를 처리할 때 렌더링을 하는 동시에 
함수를 만들어서 전달해 주었습니다. 

이 방법 대신 함수를 미리 준비하여 전달하는 방법도 있습니다. 
성능상으로는 차 이가 거의 없지만, 
가독성은 훨씬 높습니다. 

(하지만 상황에 따라 렌더링 메서드 내부에서 함수를 
만드는 것이 더 편할 때 도 있습니다. 
이는 6장에서 컴포넌트 매핑을 다룰 때 배웁니다.)

앞서 onChange와 onClick에 전달한 함수를 
따로 빼내서 컴포넌트 임의 메서드를 만들어 보겠습니다.

4.2.3.1 기본 방식
EventPractice.js

import React, { Component } from 'react';

class EventPractice extends Component {
  state = {
    message: ''
  };

  constructor(props) {
    super(props);
    this.handleChange = this.handleChange.bind(this);
    this.handleClick = this.handleClick.bind(this);
  }

  handleChange(e) {
    this.setState({
      message: e.target.value
    });
  }

  handleClick() {
    alert(this.state.message);
    this.setState({
      message: ''
    });
  }

  render() {
    return (
      <div>
        <h1>이벤트 연습</h1>
        <input
          type="text"
          name="message"
          placeholder="아무거나 입력해 보세요"
          value={this.state.message}
          onChange={this.handleChange}
        />
        <button onClick={this.handleClick}>확인</button>
      </div>
    );
  }
}

export default EventPractice;


함수가 호출될 때 this는 호출부에 따라 결정되므로, 
클래스의 임의 메서드가 특정 HTML 요소의 이벤트로 
등록되는 과정에서 메서드와 this의 관계가 끊어져 버립니다. 

이 때문에 임의 메서드가 이벤트로 등록되어도 
this가 컴포넌트 자신으로 제대로 가리키기 위해서는 
메서드를 this와 바인딩(binding)하는 작업이 필요합니다. 
만약 바인딩하지 않는 경우라면 this가 undefined를 가리키게 됩니다.

현재 constructor 함수에서 함수를 바인딩하는 작업이 이루어지고 있습니다.

노트 
메서드 이름은 어떻게 정하나요?
메서드 이름은 여러분 마음대로 정해도 됩니다. 
하지만 규칙을 정하면 보기 편하겠죠? 
이벤트를 핸들링하는 메서드는 handle_ 형식으로 정하겠습니다.

4.2.3.2 Property Initializer Syntax를 사용한 메서드 작성

메서드 바인딩은 생성자 메서드에서 하는 것이 정석입니다.

하지만 이 작업을 불편하다고 느낄 수도 있습니다. 
새 메서드를 만들 때마다 constructor도 수정해야하기 때문인데요.

이 작업을 좀 더 간단하게 하는 방법이 있습니다. 
바로 바벨 의 transform-class-properties 문법을 사용하여 
화살표 함수 형태로 메서드를 정의하는 것입니다.

이 문법을 사용하면 코드가 어떻게 변하는지 한번 볼까요?

EventPractice.js

import React, { Component } from 'react';

class EventPractice extends Component {
  state = {
    message: ''
  };

  handleChange = (e) => {
    this.setState({
      message: e.target.value
    });
  };

  handleClick = () => {
    alert(this.state.message);
    this.setState({
      message: ''
    });
  };

  render() {
    return (
      <div>
        <h1>이벤트 연습</h1>
        <input
          type="text"
          name="message"
          placeholder="아무거나 입력해 보세요"
          value={this.state.message}
          onChange={this.handleChange}
        />
        <button onClick={this.handleClick}>확인</button>
      </div>
    );
  }
}

export default EventPractice;


어때요? 훨씬 깔끔하죠?

4.2.4 input 여러 개 다루기 

우리는 input 값을 State에 넣는 방법을 배웠습니다. 
하지만 input이 여러 개일 때는 어떻게 작업할까요? 

메서드를 여러 개 만들어야 할까요? 
물론 그것도 하나의 해법이기는 합니다만, 
더 쉽게 처리하는 방법이 있습니다.

바로 event 객체를 활용하는 것입니다. 
e.target.name 값을 사용하면 됩니다. 

onChange 이벤트 핸들러에서 e.target.name은 
해당 인풋의 name을 가리킵니다. 

지금은 message겠죠 ? 
이 값을 사용하여 state를 설정하면 
쉽게 해결할 수 있습 니다. 
코드를 한번 살펴봅시다.

다음 코드에서는 render 함수에서 
name 값이 username인 input을 렌더링해 주었고, 
State 쪽에도 username이라는 값을 추가해 주었습니다. 
그리고 handleChange도 조금 변경해 주었습니다.

EventPractice.js

import React, { Component } from 'react';

class EventPractice extends Component {
  state = {
    username: '',
    message: ''
  };

  handleChange = (e) => {
    this.setState({
      [e.target.name]: e.target.value
    });
  };

  handleClick = () => {
    alert(this.state.username + ': ' + this.state.message);
    this.setState({
      username: '',
      message: ''
    });
  };

  render() {
    return (
      <div>
        <h1>이벤트 연습</h1>
        <input
          type="text"
          name="username"
          placeholder="사용자명"
          value={this.state.username}
          onChange={this.handleChange}
        />
        <input
          type="text"
          name="message"
          placeholder="아무거나 입력해 보세요"
          value={this.state.message}
          onChange={this.handleChange}
        />
        <button onClick={this.handleClick}>확인</button>
      </div>
    );
  }
}

export default EventPractice;

여기서는 다음 코드가 핵심입니다.

EventPractice의 handleChange 함수
handleChange = e => {
this.setState({
[e. target.name]: e.target.value
});

객체 안에서 key를 [ ]로 감싸면 
그 안에 넣은 레퍼런스가 가리키는 실제 값이 key 값으로 사용됩니다.

예를 들어 
다음과 같은 객체를 만들면
const name = 'variantKey' ;
const object = {
[name]: 'value'
}

결과는 다음과 같습니다.
{
'variantKey': 'value'
}

4.2.5 onKeyPress 이벤트 핸들링 

이번에는 키를 눌렀을 때 발생하는 KeyPress 이벤트를 
처리 하는 방법을 알아보겠습니다. 

comment 인풋에서 Enter를 눌렀을 때 handLeCLick 메서드를 
호출하도록 코드를 작성해 봅시다.

EventPractice.js

import React, { Component } from 'react';

class EventPractice extends Component {
  state = {
    username: '',
    message: ''
  };

  handleChange = (e) => {
    this.setState({
      [e.target.name]: e.target.value
    });
  };

  handleClick = () => {
    alert(this.state.username + ': ' + this.state.message);
    this.setState({
      username: '',
      message: ''
    });
  };

  render() {
    return (
      <div>
        <h1>이벤트 연습</h1>
        <input
          type="text"
          name="username"
          placeholder="사용자명"
          value={this.state.username}
          onChange={this.handleChange}
        />
        <input
          type="text"
          name="message"
          placeholder="아무거나 입력해 보세요"
          value={this.state.message}
          onChange={this.handleChange}
        />
        <button onClick={this.handleClick}>확인</button>
      </div>
    );
  }
}

export default EventPractice;


두 번째 텍스트 인풋에서 텍스트를 입력하고 
Enter를 눌러 보세요. 
handleClick 메서드가 실행되었나요?

4.3 함수 컴포넌트로 구현해 보기
방금 우리가 했던 작업을 함수 컴포넌트로도 
똑같이 구현할 수 있습니다. 
기존 EventPractice 컴포넌트를 
모두 지우고 다음과 같이 작성해 보세요.

EventPractice.js

import React, { useState } from 'react';

const EventPractice = () => {
  const [username, setUsername] = useState('');
  const [message, setMessage] = useState('');

  const onChangeUsername = (e) => setUsername(e.target.value);
  const onChangeMessage = (e) => setMessage(e.target.value);

  const onClick = () => {
    alert(username + ': ' + message);
    setUsername('');
    setMessage('');
  };

  const onKeyPress = (e) => {
    if (e.key === 'Enter') {
      onClick();
    }
  };

  return (
    <div>
      <h1>이벤트 연습</h1>
      <input
        type="text"
        name="username"
        placeholder="사용자명"
        value={username}
        onChange={onChangeUsername}
      />
      <input
        type="text"
        name="message"
        placeholder="아무거나 입력해 보세요"
        value={message}
        onChange={onChangeMessage}
        onKeyPress={onKeyPress}
      />
      <button onClick={onClick}>확인</button>
    </div>
  );
};

export default EventPractice;


기능이 이전과 같이 잘 작동하나요?
위 코드에서는 e.target.name을 활용하지 않고 
onChange관련 함수 두 개를 따로 만들어 주었습니다.

인풋이 두 개밖에 없다면 이런 코드도 나쁘지는 않습니다. 

하지만 인풋의 개수가 많아질 것 같으면 
e.target.name을 활 용하는 것이 더 좋을 수도 있습니다.

이번에는 usestate를 통해 사용하는 상태에 
문자열이 아닌 객체를 넣어 보겠습니다.

코드를 다음과 같이 수정해 보세요.

import React, { useState } from 'react';

const EventPractice = () => {
  const [form, setForm] = useState({
    username: '',
    message: ''
  });

  const { username, message } = form;

  const onChange = (e) => {
    const nextForm = {
      ...form, // 기존의 form 내용을 이 자리에 복사한 뒤
      [e.target.name]: e.target.value // 원하는 값을 덮어 씌우기
    };
    setForm(nextForm);
  };

  const onClick = () => {
    alert(username + ': ' + message);
    setForm({
      username: '',
      message: ''
    });
  };

  const onKeyPress = (e) => {
    if (e.key === 'Enter') {
      onClick();
    }
  };

  return (
    <div>
      <h1>이벤트 연습</h1>
      <input
        type="text"
        name="username"
        placeholder="사용자명"
        value={username}
        onChange={onChange}
      />
      <input
        type="text"
        name="message"
        placeholder="아무거나 입력해 보세요"
        value={message}
        onChange={onChange}
        onKeyPress={onKeyPress}
      />
      <button onClick={onClick}>확인</button>
    </div>
  );
};

export default EventPractice;


코드를 저장하고 기능이 잘 작동하는지 확인해 보세요.
e.target.name 값을 활용하려면, 
위와 같이 Usestate를 쓸 때 인풋 값들이 들어 있는 
form 객체를 사용해 주면 됩니다.


4.4 정리
리액트에서 이벤트를 다루는 것은 순수 자바스크립트 
또는 jQuery를 사용한 웹 애플리케이션에서 
이벤트를 다루는 것과 비슷합니다. 

리액트의 장점 중 하나는 자바스크립트에 
익숙하다면 쉽게 활용할 수 있다는 것입니다. 

따라서 기존 HTML DOM Event를 알고 있다면 
리액트의 컴포넌트 이벤트도 쉽게 다룰 수 있을 것입니다.

이 장에서는 클래스형 컴포넌트로도 구현해 보고 
함수 컴포넌트로도 구현해 보았습니다. 

클래스형 컴포넌트로 할 수 있 는 대부분의 작업은 
함수 컴포넌트로도 구현할 수 있습니다.

또한, 함수 컴포넌트에서 여러 개의 인풋 상태를 관리하기 
위해 useState에서 form 객체를 사용하는 방법도 
배워 보았는데요. 

우리가 8장에서 배울 useReducer와 
커스텀 Hooks를 사용하면 
이 작업을 훨씬 더 편하게 할 수도 있습니다.
