11장 컴포넌트 성능 최적화
11.1 많은 데이터 렌더링하기
11.2 React DevTools를 사용한 성능 모니터링
11.3 느려지는 원인 분석
11.4 React.memo를 사용하여 컴포넌트 성능 최적화
11.5 onToggle, onRemove 함수가 바뀌지 않게 하기
11.6 불변성의 중요성
11.7 TodoList 컴포넌트 최적화하기
11.8 react-virtualized를 사용한 렌더링 최적화
11.9 정리


10장에서는 학습한 지식을 활용하여 멋진 일정 관리 
애플리케이션을 만들어 보았습니다. 

현재까지는 이 애플리케이션을 사용할 때 불편하지 않습니다. 
추가되어 있는 데이터가 매우 적기 때문이죠. 

그러나 데이터가 무수히 많아지면, 
애플리케이션이 느려지는 것을 체감할 수 있을 정도로 지연이 발생합니다.

이번 실습은 다음과 같은 흐름으로 진행합니다.

많은 데이터 렌더링하기
크롬 개발자 도구를 통한 성능 모니터링
React.memo를 통한 컴포넌트 리렌더링 성능 최적화
onToggle과 onRemove가 새로워지는 현상 방지하기
react-virtualized를 사용한 렌더링 최적화

컴포넌트 성능 최적화

11.1 많은 데이터 렌더링하기
우선 실제로 랙(ag)을 경험할 수 있도록 
많은 데이터를 렌더링해 보겠습니다. 

물론 데이터를 하나하나 직접 입력하지 않고 
코드를 사용하여 쉽게 추가할 것입니다.

App 컴포넌트를 다음과 같이 수정해 보세요.

App.js

import { useState, useRef, useCallback } from 'react';
import TodoTemplate from './components/TodoTemplate';
import TodoInsert from './components/TodoInsert';
import TodoList from './components/TodoList';

// 초기 데이터 생성 함수
// 추가1
function createBulkTodos() {
  const array = [];
  for (let i = 1; i <= 2500; i++) {
    array.push({
      id: i,
      text: `할 일 ${i}`,
      checked: false,
    });
  }
  return array;
}

const App = () => {
  // 초기 데이터 상태 관리
  // 추가2
  const [todos, setTodos] = useState(createBulkTodos);

// 추가3
  // 고유 ID 관리를 위한 ref
  const nextId = useRef(2501);

  // 할 일 추가 함수
  const onInsert = useCallback((text) => {
    const todo = {
      id: nextId.current,
      text,
      checked: false,
    };
    setTodos((todos) => todos.concat(todo));
    nextId.current += 1; // ID 증가
  }, []);

  // 할 일 삭제 함수
  const onRemove = useCallback((id) => {
    setTodos((todos) => todos.filter((todo) => todo.id !== id));
  }, []);

  // 체크 상태 토글 함수
  const onToggle = useCallback((id) => {
    setTodos((todos) =>
      todos.map((todo) =>
        todo.id === id ? { ...todo, checked: !todo.checked } : todo
      )
    );
  }, []);

  return (
    <TodoTemplate>
      <TodoInsert onInsert={onInsert} />
      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />
    </TodoTemplate>
  );
};

export default App;


데이터를 하나하나 직접 입력할 수는 없으므로 
createBuLkTodos라는 함수를 만들어서 

데이터 2,500개를 자동으로 생성 했습니다.

여기서 주의할 점은 usestate의 기본값에 
함수를 넣어 주었다는 것입니다. 

여기서 usestate (CreateBuLkTodos())라고 
작성하면 리렌더링될 때마다 

createBulkTodos 함수가 호출되지만,
usestate(CreateBulkTodos)처럼 
파라미터를 함수 형태로 넣어 주면

컴포넌트가 처음 렌더링될 때만 createBulkTodos 
함수가 실행될 것입니다.

자, 이제 코드를 저장하면 다음과 같이 
데이터 2,500개가 나타날 것입니다.

많은 데이터 렌더링하기
 
데이터 2,500개가 렌더링되었다면 항목 중 하나를 체크해보세요. 
이전보다 느려진 것이 느껴지나요?


11.2 React DevTools를 사용한 성능 모니터링

성능을 분석해야 할 때는 느려졌다는 
느낌만으로 충분하지 않습니다. 

정확히 몇 초가 걸리는지 확인해야 하는데, 
이는 React DevTools를 사용하여 측정하면 됩니다. 
리액트 v17 전에는 브라우저에 내장된 성능 측정 도구의 
User Timing API를 사용했지만, 

v17부터는 리액트 전용 개발자 도구인 React DevTools를 
사용해야 성능 분석을 자세하게 할 수 있 습니다. 

10장에서 리액트 개발자 도구의 Components탭을 열어봤었는데, 
그 우측에 Profiler라는 탭을 열어보세요. 

이 탭을 열면 좌측 상단에 파란색 녹화 버튼이 보일 것입니다.

React Dev Tools의 Profiler 탭

이 버튼을 누르고 '할 일 1' 항목을 체크한 다음, 
화면에 변화가 반영되면 녹화 버튼을 누르세요. 
그러면 다음과 같이 성능 분석 결과가 나타납니다.

성능 분석 결과

우측의 Render duration은 리렌더링에 소요된 
시간을 의미 합니다. 

변화를 화면에 반영하는 데 271.3ms가 걸렸다는 
의미죠(1ms는 0.001초입니다). 

참고로 소요 시간은 컴퓨터 환경에 따라 다르게 나타날 수 있습니다.
Profiler 탭의 상단에 있는 불꽃 모양 아이콘 우측의 
랭크 차트 아이콘을 눌러보세요.

11-5 Ranked Chart(i)

이 화면에서는 리렌더링된 컴포넌트를 오래 걸린 순으로 
정렬하여 나열해줍니다. 

스크롤을 해보면 정말 많은 컴포넌트가 
리렌더링된 것을 확인할 수 있습니다. 

초록색 박스들이 너무 작아서 텍스트 내용이 
잘려서 보이지 않을 텐데요 
클릭을하면 
크기가 늘어나 내용을 확인 할 수 있습니다.
 
작은 초록색 박스를 누르고 아래로 쭉 스크롤을 내려보세요.

이를 보면 이번에 변화를 일으킨 컴포넌트랑 관계없는 
컴포넌트들도 리렌더링된 것을 확인할 수 있습니다.

(처리 시간은 컴퓨터 환경에 따라 결과가 다르게 나타날 수 있습니다). 

하나의 항목만 업데이트하는데 
렌더링 소요시간이 271ms가 걸리고 있습니다. 
이는 결코 좋지 못한 성능입니다. 
이제 이 를 최적화하는 방법을 알아보겠습니다.


11.3 느려지는 원인 분석

컴포넌트는 다음과 같은 상황에서 리렌더링이 발생합니다.
   자신이 전달받은 props가 변경될 때
   자신의 State가 바뀔 때
   부모 컴포넌트가 리렌더링될 때
   forceupdate 함수가 실행될 때 

지금 상황을 분석해 보면, 할 일 1' 목을 체크할 경우 
App 컴포넌트의 State가 변경되면서 
App 컴포넌트가 리렌더링 됩니다. 

부모 컴포넌트가 리렌더링되었으니 
TodoList 컴포넌트가 리렌더링되고 

그 안의 무수한 컴포넌트들도 리렌더링 됩니다
.
'할 일 1' 항목은 리렌더링되어야 하는 것이 맞지만, 
'할 일 2'부터 '할 일 2500'까지는 리렌더링을 
안 해도 되는 상황인 데 
모두 리렌더링되고 있으므로 이렇게 느린 것입니다. 

컴포 넌트의 개수가 많지 않다면 
모든 컴포넌트를 리렌더링해도 느려지지 않는데, 
지금처럼 약 2,000개가 넘어가면 성능이 저하됩니다.

이럴 때는 컴포넌트 리렌더링 성능을 
최적화해 주는 작업을 해 주어야 합니다. 

즉, 리렌더링이 불필요할 때는 
리렌더링을 방지해 주어야 하는데, 
어떻게 방지하는지 알아봅시다.


11.4 React.memo를 사용하여 컴포넌트 성능 최적화

컴포넌트의 리렌더링을 방지할 때는 
7장에서 배운 shouldComponentupdate라는 
라이프사이클을 사용하면 됩니다. 

그런데 함수 컴포넌트에서는 라이프사이클 
메서드를 사용할 수 없습니다. 

그대신 React.memo라는 함수를 사용합니다. 
컴포넌트의 props가 바뀌지 않았다면, 

리렌더링하지 않도록 설정하여 
함수 컴포넌트의 리렌더링 성능을 최적화해 줄 수 있습니다.

React.memo의 사용법은 매우 간단합니다. 
컴포넌트를 만들고 나서 감싸 주기만 하면 됩니다. 

TodoListItem 컴포넌트에 
다음과 같이 React.memo를 적용해 보세요.

TodoListItem.js

import React from 'react';
import {
  MdCheckBoxOutlineBlank,
  MdCheckBox,
  MdRemoveCircleOutline,
} from 'react-icons/md';
import cn from 'classnames';
import './TodoListItem.scss';

const TodoListItem = ({ todo, onRemove, onToggle }) => {
  const { id, text, checked } = todo;

  return (
    <div className="TodoListItem">
      <div
        className={cn('checkbox', { checked })}
        onClick={() => onToggle(id)}
      >
        {checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}
        <div className="text">{text}</div>
      </div>
      <div className="remove" onClick={() => onRemove(id)}>
        <MdRemoveCircleOutline />
      </div>
    </div>
  );
};

//추가
export default React.memo(TodoListItem);


정말 간단하지요? 
이제 TodoListItem 컴포넌트는 
todo, onRemove, onToggle이 바뀌지 않으면 
리렌더링을 하지 않습니다.

11.5 onToggle, onRemove 함수가 바뀌지 않게 하기

React.memo를 사용하는 것만으로 컴포넌트 최적화가 끝나지는 않습니다. 
현재 프로젝트에서는 todos 배열이 업데이트되면
onRemove와 onToggle 함수도 새롭게 바뀌기 때문입니다.

onRemove와 onToggle 함수는 
배열 상태를 업데이트하는 과정에서 
최신 상태의 todos를 참조하기 때문에 
todos 배열이 바뀔 때마다 함수가 새로 만들어집니다. 

이렇게 함수가 계속 만들어지는 상황을 방지하는 
방법은 두 가지입니다. 

첫 번째 방법은 useState의 함수형 업데이트 
기능을 사용하는 것이고, 

두 번째 방법은 useReducer를 사용하는 것입니다.

11.5.1 useState의 함수형 업데이트 

기존에 setTodos 함수를 사용할 때는 
새로운 상태를 파라미터로 넣어 주었습니다.

 
setTodos를 사용할 때 새로운 상태를 파라미터로 넣는 대신,
상태 업데이트를 어떻게 할지 정의해 주는 
업데이트 함수를 넣을 수도 있습니다. 

이를 함수형 업데이트라고 부릅니다.

예시를 한번 확인해 볼까요?

const [number, setNumber] = useState(0);
// prevNumbers는 현재 number 값을 가리킵니다.
const onIncrease = useCallback(
() => setNumber (prevNumber => prevNumber + 1),
[],
);

setNumber(number+1)을 하는 것이 아니라, 

위 코드처럼 어떻게 업데이트할지 정의해 주는 
업데이트 함수를 넣어 줍니다. 

그러면 useCallback을 사용할 때 
두 번째 파라미터로 넣는 배열에 number를 넣지 않아도 됩니다.

그럼 이제 onToggLe, onRemove 함수에서 
usestate의 함수형 업데이트를 사용해 볼까요? 
이 과정에서 onInsert 함수도 함께 수정하겠습니다.

App.js

import { useRef, useState, useCallback } from 'react';
import TodoTemplate from './components/TodoTemplate';
import TodoInsert from './components/TodoInsert';
import TodoList from './components/TodoList';

// 초기 데이터 생성 함수
function createBulkTodos() {
  const array = [];
  for (let i = 1; i <= 2500; i++) {
    array.push({
      id: i,
      text: `할 일 ${i}`,
      checked: false,
    });
  }
  return array;
}

const App = () => {
  // 초기 데이터 상태 관리
  const [todos, setTodos] = useState(createBulkTodos);

  // 고유 ID 관리를 위한 ref
  const nextId = useRef(2501);

  // 할 일 추가 함수
  const onInsert = useCallback((text) => {
    const todo = {
      id: nextId.current,
      text,
      checked: false,
    };
	// 변경
    setTodos((todos) => todos.concat(todo));
    nextId.current += 1; // ID 1씩 증가
  }, []);

  // 할 일 삭제 함수
  const onRemove = useCallback((id) => {
  // 변경
    setTodos((todos) => todos.filter((todo) => todo.id !== id));
  }, []);

  // 체크 상태 토글 함수
  const onToggle = useCallback((id) => {
  // 변경
    setTodos((todos) =>
      todos.map((todo) =>
        todo.id === id ? { ...todo, checked: !todo.checked } : todo
      )
    );
  }, []);

  return (
    <TodoTemplate>
      <TodoInsert onInsert={onInsert} />
      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />
    </TodoTemplate>
  );
};

export default App;



setTodos를 사용할 때 
그 안에 todos =>만 앞에 넣어 주면 됩니다. 
정말 간단하지요?
이제 코드를 저장하고, 조금 전 했던 것과 똑같이 
Profiler 개 발자 도구를 열고 성능을 측정해 보세요.


최적화 이후 성능
성능이 훨씬 향상된 것을 확인했나요? 
렌더링 소요시간이 113.1ms 에서 28.6ms로 줄었습니다. 

왼쪽에 회색 빗금이 그어져 있는 박스들이 있습니다. 
이는 React.memo를 통해 
리렌더링되지 않은 컴포넌트를 나타냅니다. 

랭크 차트 아이콘을 눌러서 이번에 리렌더링된 
컴포넌트의 수를 보면 몇 개 없 는 것을 확인할 수 있습니다.


11.5.2 useReducer 사용하기 

usestate의 함수형 업데이트를 사용하는 대신, 
UseReducer 를 사용해도 onToggle과 onRemove가 
계속 새로워지는 문제 를 해결할 수 있습니다.
코드를 다음과 같이 한번 고쳐보세요.

App.js

import { useReducer, useRef, useCallback } from 'react';
import TodoTemplate from './components/TodoTemplate';
import TodoInsert from './components/TodoInsert';
import TodoList from './components/TodoList';

// 초기 데이터 생성 함수
function createBulkTodos() {
  const array = [];
  for (let i = 1; i <= 2500; i++) {
    array.push({
      id: i,
      text: `할 일 ${i}`,
      checked: false,
    });
  }
  return array;
}

// todoReducer 함수
function todoReducer(todos, action) {
  switch (action.type) {
    case 'INSERT': // 새 항목 추가
      // { type: 'INSERT', todo: { id: 1, text: 'todo', checked: false } }
      return todos.concat(action.todo);

    case 'REMOVE': // 항목 제거
      // { type: 'REMOVE', id: 1 }
      return todos.filter((todo) => todo.id !== action.id);

    case 'TOGGLE': // 체크 상태 토글
      // { type: 'TOGGLE', id: 1 }
      return todos.map((todo) =>
        todo.id === action.id ? { ...todo, checked: !todo.checked } : todo
      );

    default:
      return todos;
  }
}

const App = () => {
  // useReducer로 상태 관리
  const [todos, dispatch] = useReducer(todoReducer, undefined, createBulkTodos);

  // 고유 ID 관리를 위한 ref
  const nextId = useRef(2501);

  // 새 항목 추가
  const onInsert = useCallback((text) => {
    const todo = {
      id: nextId.current,
      text,
      checked: false,
    };
    dispatch({ type: 'INSERT', todo });
    nextId.current += 1; // ID 증가
  }, []);

  // 항목 제거
  const onRemove = useCallback((id) => {
    dispatch({ type: 'REMOVE', id });
  }, []);

  // 체크 상태 토글
  const onToggle = useCallback((id) => {
    dispatch({ type: 'TOGGLE', id });
  }, []);

  return (
    <TodoTemplate>
      <TodoInsert onInsert={onInsert} />
      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />
    </TodoTemplate>
  );
};

export default App;


useReducer를 사용할 때는 
원래 두 번째 파라미터에 초기 상태를 넣어 주어야 합니다. 

지금은 그대신 두 번째 파라미터에 undefined를 넣고, 

세 번째 파라미터에 초기 상태를 만들어 주는 함수인 
CreateBulkTodos를 넣어 주었는데요. 

이렇게 하면 컴포넌트가 맨 처음 렌더링될 때만 
createBulkTodoS 함수가 호출됩니다.

useReducer를 사용하는 방법은 
기존 코드를 많이 고쳐야 한 다는 단점이 있지만, 

상태를 업데이트하는 로직을 모아서 
컴포넌트 바깥에 둘 수 있다는 장점이 있습니다.
 
성능상으로는 두 가지 방법이 비슷하기 때문에 
어떤 방법을 선택할지는 여러분의 취향에 따라 결정하면 됩니다

-
11.6 불변성의 중요성

리액트 컴포넌트에서 상태를 업데이트할 때 
불변성을 지키는 것은 매우 중요합니다. 

앞에서 useState를 사용해 만든 todos 배열과 
setTodos 함수를 사용하는 onToggle 함수를 다시 확인해볼까요?

const onToggle = useCallback((id) => {
  setTodos((todos) =>
    todos.map((todo) =>
      todo.id === id ? { ...todo, checked: !todo.checked } : todo
    )
  );
}, []);


기존 데이터를 수정할 때 직접 수정하지 않고, 
새로운 배열을 만든 다음에 
새로운 객체를 만들어서 필요한 부분을 
교체해 주는 방식으로 구현했습니다. 

업데이트가 필요한 곳에서는 
아예 새로운 배열 혹은 새로운 객체를 만들기 때문에, 
React.memo를 사용했을 때 
props가 바뀌었는지 

혹은 바뀌지 않았는지를 
알아내서 리렌더링 성능을 최적화해 줄 수 있습니다.

이렇게 기존의 값을 직접 수정하지 않으면서 
새로운 값을 만들어 내는 것을 '불변성을 지킨다고 합니다. 

다음 예시 코드에서는 불변성을 어떻게 지키고 있는지 생각해 보세요.


예시 코드

// 배열 예제
const array = [1, 2, 3, 4, 5];

// 잘못된 배열 복사: 동일한 배열을 참조합니다.
const nextArrayBad = array;

nextArrayBad[0] = 100;
console.log(array === nextArrayBad); 
// true - 동일한 배열을 참조하기 때문

// 올바른 배열 복사: 배열 내부의 값을 복사합니다.
const nextArrayGood = [...array];

nextArrayGood[0] = 100;
console.log(array === nextArrayGood); 
// false - 서로 다른 배열

// 객체 예제
const object = {
  foo: 'bar',
  value: 1,
};

// 잘못된 객체 복사: 동일한 객체를 참조합니다.
const nextObjectBad = object;

nextObjectBad.value = nextObjectBad.value + 1;
console.log(object === nextObjectBad); 
// true - 동일한 객체를 참조하기 때문

// 올바른 객체 복사: 기존 내용을 복사하고 새로운 값을 덮어씁니다.
const nextObjectGood = {
  ...object, // 기존 내용 복사
  value: object.value + 1, // 새로운 값으로 덮어쓰기
};

console.log(object === nextObjectGood); 
// false - 서로 다른 객체


불변성이 지켜지지 않으면 객체 내부의 값이 
새로워져도 바뀐것을 감지하지 못합니다. 

그러면 React.memo에서 서로 비교하여 최적화하는 것이 불가능하겠지요?

추가로 전개 연산자(... 문법)를 사용하여 
객체나 배열 내부의 값을 복사할 때는 

얕은 복사(shallow copy)를 하게 됩니다.

즉, 내부의 값이 완전히 새로 복사되는 것이 아니라 

가장 바깥쪽에 있는 값만 복사됩니다. 

따라서 내부의 값이 객체 
혹은 배열이라면 
내부의 값 또한 따로 복사해 주어야 합니다. 
다음 코드를 읽어 보면 쉽게 이해될 것입니다.

예시 코드

// todos 배열 예제
const todos = [
  { id: 1, checked: true },
  { id: 2, checked: true },
];

// 배열 복사
const nextTodos = [...todos];

// 잘못된 방식: 같은 객체를 참조하기 때문에 todos도 영향을 받습니다.
nextTodos[0].checked = false;
console.log(todos[0] === nextTodos[0]);
 // true - 같은 객체를 참조

// 올바른 방식: 새로운 객체를 생성하여 대입
nextTodos[0] = {
  ...nextTodos[0], // 기존 객체의 내용을 복사
  checked: false, // 새로운 값 덮어쓰기
};
console.log(todos[0] === nextTodos[0]); 
// false - 서로 다른 객체

// 객체 내부에 객체가 있는 경우 예시
const complexObject = {
  objectInside: {
    enabled: true,
  },
};

// 불변성을 유지하면서 새로운 값을 할당
const nextComplexObject = {
  ...complexObject, // 기존 객체 복사
  
  objectInside: {
    ...complexObject.objectInside, // 내부 객체 복사
	
    enabled: false, // 새로운 값 덮어쓰기
  },
};

console.log(complexObject === nextComplexObject); 
// false - 서로 다른 객체

console.log(complexObject.objectInside === 
nextComplexObject.objectInside); 
// false - 내부 객체도 서로 다름



배열 혹은 객체의 구조가 정말 복잡해진다면 
이렇게 불변성을 유지하면서 업데이트 하는것도 까다로워집니다. 
이렇게 복잡한 상황일 경우 

immer라는 라이브러리의 도움을 받으면 정말 편하게 작업할 수 있는데요. 
이에 대한 내용은 다음 장에서 알아보겠습니다.


11.7 TodoList 컴포넌트 최적화하기

리스트에 관련된 컴포넌트를 최적화할 때는 
리스트 내부에서 사용하는 컴포넌트도 최적화해야 하고, 

리스트로 사용되는 컴포넌트 자체도 최적화해 주는 것이 좋습니다.

TodoList 컴포넌트를 다음과 같이 수정해 보세요.

TodoList.js

import React from 'react';
import TodoListItem from './TodoListItem';
import './TodoList.scss';

const TodoList = ({ todos, onRemove, onToggle }) = {
return (...);
export default React.memo(TodoList);


위 최적화 코드는 현재 프로젝트 성능에 전혀 영향을 주지 않습니다. 

왜냐하면, TodoList 컴포넌트의 부모 컴포넌트인 
App 컴포넌트가 리렌더링되는 유일한 이유가 
todos 배열이 업데이트될 때이기 때문이죠. 

즉, 지금 TodoList 컴포넌트는 
불필요한 리렌더링이 발생하지 않습니다. 

하지만 App 컴포넌트에 다른 state가 추가되어 
해당 값들이 업데이트될 때는 
TodoList 컴포넌트가 불필요한 리렌더링을 할 수도 있겠죠.

그렇기 때문에 지금 React.memo를 사용해서 미리 최적화해
준 것입니다.

리스트 관련 컴포넌트를 작성할 때는 
리스트 아이템과 리스트, 
이 두 가지 컴포넌트를 최적화해 주는 것을 잊지 마세요.

그러나 내부 데이터가 100개를 넘지 않거나 
업데이트가 자주 발생하지 않는다면, 
이런 최적화 작업을 반드시 해 줄 필요는 없습니다.


11.8 react-virtualized를 사용한 렌더링 최적화


지금까지 리액트 컴포넌트 리렌더링 성능을 최적화하는 
방법 을 알아보았습니다. 

리렌더링 성능을 최적화할 때는 필요할 때만 
리렌더링하도록 설정해 주었지요? 

이번에는 또 다른 렌더링 성능 최적화 방법을 알아보겠습니다. 

일정 관리 애플리 케이션에 초기 데이터가 2,500개 등록되어 있는데, 

실제 화면에 나오는 항목은 아홉 개뿐입니다. 
나머지는 스크롤해야 만 볼 수 있죠.

현재 컴포넌트가 맨 처음 렌더링될 때 2,500개 컴포넌트 중
2,491개 컴포넌트는 스크롤하기 전에는 보이지 않음에도 불구하고 
렌더링이 이루어집니다. 
 
꽤 비효율적이지요. 그리고 나중에 todos 배열에 변동이 생길 때도 
TodoList 컴포넌트 내부의 map 함수에서 
배열의 처음부터 끝까지 컴포넌트로 변환해 주는데, 

이 중에서 2,491개는 보이지 않으므로 시스템 자원 낭비입니다.

이번 절에서 배울 react-virtualized를 사용하면 

리스트 컴포넌트에서 스크롤되기 전에 보이지 않는 컴포넌트는 
렌더링 하지 않고 크기만 차지하게끔 할 수 있습니다. 

그리고 만약 스크롤되면 해당 스크롤 위치에서 
보여 주어야 할 컴포넌트를 자연스럽게 렌더링시키죠. 
이 라이브러리를 사용하면 낭비되는 자원을 아주 쉽게 아낄 수 있습니다.


11.8.1 최적화 준비

우선 yarn을 사용하여 설치해 주세요.
$ yarn add react-virtualized

이제 본격적으로 react-virtualized를 사용하여 
최적화해 봅시다! 

react-virtualized에서 제공하는 List 컴포넌트를 사용하여 
Todolist 컴포넌트의 성능을 최적화할 것입니다.

최적화를 수행하려면 사전에 먼저 해야 하는 작업이 있는데, 
바로 각 항목의 실제 크기를 px 단위로 알아내는 것입니다.

이 값은 우리가 작성한 CSS를 확인해서 직접 계산해도 되지만, 
이보다 훨씬 더 편리하게 알아낼 수 있습니다. 

크롬 개발자 도구의 좌측 상단에있는 아이콘을 눌러서 
크기를 알고 싶은 항목에 커서를 대보세요.

크기 알아내기

각 항목의 크기는 가로 512px, 
세로 57px입니다. 
크기를 알 아낼 때 
두 번째 항목을 확인해야 하는데요, 

두 번째 항목부터 테두리가 포함되어 있기 때문입니다(
첫 번째 항목은 테두리가 없기 때문에 56px이 됩니다).


11.8.2 TodoList 수정

크기를 알아냈다면 이제 TodoList 컴포넌트를 
다음과 같이 수정해 주세요.

TodoList.js


import React, { useCallback } from 'react';
//추가
import { List } from 'react-virtualized';
import TodoListItem from './TodoListItem';
import './TodoList.scss';

const TodoList = ({ todos, onRemove, onToggle }) => {
  const rowRenderer = useCallback(
    ({ index, key, style }) => {
      const todo = todos[index];
      return (
        <TodoListItem
          todo={todo}
          key={key}
          onRemove={onRemove}
          onToggle={onToggle}
          style={style}
        />
      );
    },
    [onRemove, onToggle, todos]
  );

  return (
    <List
      className="TodoList"
      width={512} // 전체 너비
      height={513} // 전체 높이
      rowCount={todos.length} // 항목 개수
      rowHeight={57} // 각 항목의 높이
      rowRenderer={rowRenderer} // 항목을 렌더링하는 함수
      list={todos} // 렌더링할 데이터 배열
      style={{ outline: 'none' }} // 기본 outline 스타일 제거
    />
  );
};

export default React.memo(TodoList);

==============================================================
추가.
vite.config.js

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      'react-virtualized': 'react-virtualized/dist/umd/react-virtualized.js',
    },
  },
});
==============================================================

List 컴포넌트를 사용하기 위해 
rowRenderer라는 함수를 새로 작성해 주었습니다. 

이 함수는 react-virtualized의 List 컴포넌트에서 
각 TodoItem을 렌더링할 때 사용하며, 

이 함 수를 List 컴포넌트의 props로 설정해 주어야 합니다. 
이 함 수는 파라미터에 index, key, style 값을 
객체 타입으로 받아와서 사용합니다.

List 컴포넌트를 사용할 때는 
해당 리스트의 전체 크기와 
각 항목의 높이, 
각 항목을 렌더링할 때 사용해야 하는 함수, 
그리고 배열을 props로 넣어 주어야 합니다. 

그러면 이 컴포넌트가 전달받은 props를 사용하여 자동으로 최적화해 줍니다.


11.8.3 TodoListltem 수정

TodoList를 저장하고 나면 
스타일이 깨져서 나타날텐데 
TodoListltem 컴포넌트를 다음과 같이 수정하면 해결됩니다.

TodoListItem.js ~ render

import React from 'react';
import {
  MdCheckBoxOutlineBlank,
  MdCheckBox,
  MdRemoveCircleOutline,
} from 'react-icons/md';
import cn from 'classnames';
import './TodoListItem.scss';

const TodoListItem = ({ todo, onRemove, onToggle, style }) => {
  const { id, text, checked } = todo;

  return (
    <div className="TodoListItem-virtualized" style={style}>
      <div className="TodoListItem">
        <div
          className={cn('checkbox', { checked })}
          onClick={() => onToggle(id)}
        >
          {checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}
          <div className="text">{text}</div>
        </div>
        <div className="remove" onClick={() => onRemove(id)}>
          <MdRemoveCircleOutline />
        </div>
      </div>
    </div>
  );
};

export default React.memo(TodoListItem);


render 함수에서 
기존에 보여 주던 내용을 div로 한 번 감싸고, 

해당 div에는 TodoListItem-virtualized라는 
ClassName을 설정하고, 

props로 받아 온 Style을 적용시켜 주었습니다.

여기서 TodoListItem-virtualized라는 클래스를 만든 것은 
컴포넌트 사이사이에 테두리를 제대로 쳐주고, 

홀수 번째 /짝수 번째 항목에 다른 배경 색상을 설정하기 위해서입니다

그다음에는 TodoListltem의 스타일 파일에서 
최하단에 있던&+&를 사용하여. 

TodoListItem 사이사이에 테두리를 설정했던 코드와 
&:nth-child(even)을 사용하여 
다른 배경 색상을 주는 코드를 지우고, 
코드 최상단에 다음 코드를 삽입 해 주세요.

TodoListItem.scss

.TodoListItem-virtualized {
  & + & {
    border-top: 1px solid #dee2e6;
  }
  &:nth-child(even) {
    background: #f8f9fa;
  }
}

(...)

작업이 모두 끝났습니다! 
리스트가 잘 나타나나요? 
다시 한 번 성능을 측정해 보세요.

react-virtualized를 통한 최적화 결과

React.memo를 통해 28ms까지 줄였는데, 
이번에는 4.6ms로 줄었습니다!

11.9 정리
이 장에서는 리액트 애플리케이션에 많은 데이터를 
렌더링하는 리스트를 만들어 지연을 유발해 보고, 

이를 해결하는 방법 을 알아보았습니다. 

리액트 컴포넌트의 렌더링은 기본적으로 빠르기 때문에 
컴포넌트를 개발할 때 최적화 작업에 대해 
너무 큰 스트레스를 받거나 
모든 컴포넌트에 일일이 React.memo를 작성할 필요는 없습니다. 

단, 리스트와 관련된 컴포넌트를 만들 때 
보여 줄 항목이 100개 이상이고 

업데이트가 자주 발생한다면, 
이 장에서 학습한 방식을 사용하여 꼭 최적화 하길 바랍니다.
